<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>光子の胡话</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 光子の胡话</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 20 Dec 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>从一模到高考</title>
      <link>http://localhost:1313/posts/cong-yi-mo-dao-gao-kao/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/cong-yi-mo-dao-gao-kao/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;转载自去年参加高考的花儿大佬，向 SJTU IEEE 大佬低头（x&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今年不少区的一模已经结束了，这两天不断听到有小朋友们说诸如某某区拿江苏压轴题当填空题、英语难胜专八等抱怨，又勾起了去年的记忆，实在是有些想法。&lt;/p&gt;

&lt;h2 id=&#34;高考不是常模考试:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;高考不是常模考试&lt;/h2&gt;

&lt;p&gt;首先，浦东新区语文教研员强烈认为，高考不是常模考试，因此“有些人给高考计算合格率、优秀率，那是他们完全不懂高考”。我完全赞同这一观点。把高考做成常模考试既无可能也无必要。可能是指高考由于保密性要求和出题时间上的紧迫性，不可能建立起雅思、托福等语言类考试的锚定人群，只能通过出题老师的经验和评卷时的微调对平均分稍作控制；无必要是指高考作为选拔类考试，只牵涉到同年考生得分之间的比较，与历年数据无关，因此根本没有必要建立起参考系。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;搞清楚了这一点，就可以知道，模考亦不是常模考试，用模考分去预估高考分是无稽之谈或者江湖骗钱之术，用模考分去恐吓学生好好学习的想法也真是滑天下之大稽。&lt;/p&gt;

&lt;p&gt;那么模考的意义究竟是什么呢？&lt;/p&gt;

&lt;h2 id=&#34;谈-模考-之-模:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;谈“模考”之“模”&lt;/h2&gt;

&lt;p&gt;“模考”中的“模”字给人以“模拟”、“效法”、“模范”之直觉，因此很多同学视本区模考为神圣，压力巨大，遇到难题，感觉药丸。但实际上大家也看到了，不少区县直接拿外省市历年高考题作为模考题，这一做法的本身就与“模拟”二字南辕北辙。上海卷不同于全国卷，这一点大家应当十分清楚，然而模考卷依然堂而皇之地引入上海教师们敬而远之的其他地方卷考题，意义何在呢？&lt;/p&gt;

&lt;p&gt;对此，我想说的是，出卷人的此类做法是人为降低了模考卷质量，是根本没有花时间去研究上海卷的命题特点，没有用心出模考题。如果上纲上线，就是出题人没有责任心、玩忽职守。&lt;/p&gt;

&lt;p&gt;令人吃惊的是，低质量考卷居然能充斥模拟考江湖，因此，所谓的“模拟考”模拟的只不过是考试时间安排，演练的也不过是考试心态而已。如果你能在模考前一天晚上睡得踏踏实实，考试开考前心不乱神不慌，那么你在心态上做得非常成功，我敢说你的高考已经成功了一大半。（现在某些区连考试时间也不模拟了，说得好听是为了压缩时间，不影响学校“正常教学”，要我说就是取消了算了。毕竟题目难度也不模拟，时间也不模拟，那模拟你#文明#呢）&lt;/p&gt;

&lt;p&gt;我一直是某些老师所坚持的“模拟考就应该难度更大，然后高考就不会紧张”此类观点的强烈反对者。如果模拟考难度过大，那么考生根本无法掌握好合理的时间分配，反而严重影响真正高考时的手脚。&lt;/p&gt;

&lt;h2 id=&#34;什么才是真正的模考呢:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;什么才是真正的模考呢？&lt;/h2&gt;

&lt;p&gt;两个字：春考。&lt;/p&gt;

&lt;h2 id=&#34;你前面说了那么多-究竟要怎么面对模考呢:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;你前面说了那么多，究竟要怎么面对模考呢？&lt;/h2&gt;

&lt;p&gt;先说结论：知己知彼。&lt;/p&gt;

&lt;p&gt;“己”是你自己。虽然难度可能不匹配，但是模考依然能够充分暴露考生的弱点。在剖析弱点的时候，一定要遵守“愈研愈入，愈入愈深”的方法。不要说题目难所以你做不来，你究竟是卡在难题的哪一步了？经验就是一点一点积累的。不要说你是粗心所以做错，你究竟是哪个地方粗心了？应对粗心的最好办法就是知道自己哪里容易粗心，然后保持高度警惕。不要说时间来不及，所以你没得分。你究竟要多少时间才能做完这类题？下一次，留好充足时间。不要说你某一个章节学的不好，你究竟是本章节哪一类题目做不好？拿出精编和五星级题典，找到此类题使劲刷。不要说你单词不认识公式背不出，所以阅读看不懂三角做不来。单词不熟悉就去背单词，高词都背不出考什么英语；当然如果你已经背过好多遍，还拿单词没背好安慰自己，那复读欢迎您。公式背不出就使劲背，就那几条公式每天看几遍一个月总能记住。&lt;/p&gt;

&lt;p&gt;“彼”指高考。不光是学生，连很多老师也没弄明白上海高考的特点：重基础、轻技巧、高灵活。这其中最最重要的是基础。我很欣赏我数学老师的一句话：不是难的题目会做了，简单的题目就会了；而是简单的题目十拿十稳，难的题目自然会。如果师生只在乎难题的训练，在难题上花了超级多的时间，忽视了基础题的训练，那么他们真是好高骛远。对于学生来说，拿到一道题，首先三秒钟之内就应该判断出它是不是高考的可能出题目标，如果是的，请你认真做；如果不是，Let it go，该抄抄抄抄，该水水水水。&lt;/p&gt;

&lt;h2 id=&#34;我所要实名反对的:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;我所要实名反对的&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;** 老师的作业无论多少，我都应当保质保量地完成 **
#反对# 如果你有时间，那就一定要认真完成；如果因为做作业而没有时间，原因一定不是老师的作业太多，而是学生没有做到“知己知彼”这一点。我相信会有因材施教的名师，给学生布置的作业恰好是所有人所正好最迫切需要练习的部分。但是，我没听说过。做作业，选你最需要做的部分，做你最薄弱的部分，练最适合夯实基础的题目。剩下的，空着就空着，抄抄就抄抄（认真）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;**（ A 学科老师）“ C 学科有什么好学的，我当年轻轻松松就 140+” **
#反对# 这类老师的这类言论是最不负责任的言论，很容易使部分 C 学科基础较弱的学生产生厌学情绪。如果有老师这么说，扔他一张 18 年的卷子，考到了算我输。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;** 上海高考要拿高分，理科难题最重要 **
#反对# 大三门里面，文科 300 分，很多人所谓“重要”的数学 150 分。而数学，最后一问一般性 6 - 8 分，而且总能够拿到一些分。这样看来，如果前面的填选你错了一道题，那么就相当于最后一问做出来也是白做了。如果前面全对，最后一问扣 5 分，照样 145+，一样是高分，不会影响你考清华开法拉利。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;** 高三了如果想要考清北，一定要学自招 **
#反对# 个人认为，最靠谱的办法还是裸分上线。自招培训主要是补课机构的摇钱树吧。（不绝对）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;** 我应该有精美的错题本 **
#反对# 我反对错题整理，但强烈支持错题的再思考。注意，我支持的是“思考”，反对的是“整理”。意思应该很清楚了，“整理”只不过是一个形式，很多女生花了大量时间去做错题整理，字迹清晰整洁，格式版面楚楚动人，错就错在不过是流于表面，最后一本厚厚的笔记本感动了自己，没有成效。事实上，把做过的练习卷和题集保存好，甚至直接把错题剪下来，有空的时候一道一道地在原地做就行了。如果有心得体会，或者巧妙的公式、方法，就简单地汇总在一个小本子上就好。没有必要去抄录原题、给出完整解答，因为这是不思考的表现。事实上，能够总结出出题点和解题关键步骤，说明你真正懂了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;** 英语就是背单词就行了 **
#严正反对# 说这话就好像是说学语文只要认字就行了。行吗？语言是一种能力，如果有人靠背字典学英语，那么他一定也认认真真地研读过字典上的短语和例句。我认为学英语的正确方法是听、说、读、写。最要的是“读”。没有 Input 哪里能有 Output？不要浪费了每天训练的英语阅读题目原文，每一篇都是很好的语言材料，如果只为了做题草草了事，那真是太可惜了。我支持的阅读理解题训练方法是在做题前仔细看一遍原文，然后试着不看原文，一口气把题目做完。如果你成功了，那么说明你真正理解了文章。“阅读理解题”，考察的是“理解”，不是答题技巧。
如果你英语不好，寄希望于每天背数小时单词来提高英语成绩，那么我要告诉你，很可惜，这是看起来勤奋无比，实则十分懒惰的行为。（当然单词是重要的，但绝不是最重要的，更不是英语的唯一）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;还剩半年-我该做什么:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;还剩半年，我该做什么&lt;/h2&gt;

&lt;p&gt;慌是没有用的，要是慌有用，那么大家都去慌好了。&lt;/p&gt;

&lt;p&gt;找一两个说走就走的好朋友，在心态爆炸的时候就去打球。&lt;/p&gt;

&lt;p&gt;心态永远是最重要的，非常紧张抑或是志在必得的翻车例子实在是太多。&lt;/p&gt;

&lt;p&gt;正确区分小三门和大三门的关系，小三门只要做近两年的模考卷就好，然后重视书本基础概念，做好整理工作。加一时代的考题已经是老黄历了，做陈年难题没有太大意义。&lt;/p&gt;

&lt;h2 id=&#34;如何对待英语一年两考:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;如何对待英语一年两考&lt;/h2&gt;

&lt;p&gt;很简单：平等对待两次考试，都要准备都要考。二考政策没有什么不公平的。我前面也说过，语言是一种能力。既然是能力，那么一定不会在短短五个月内发生剧烈的变化，除非你投入非常多。有同学会说学英语费时间，一考可以接受，第二学期就不想再学英语了，节省下来的时间去刷“2+1”会更好。那也只是你以为。（当然你也可以说，只是我以为）除非一考已经人品大爆发，我绝不赞成半年不学英语，最后放弃二考的行为。至少每周刷一套题，然后去考试嘛。&lt;/p&gt;

&lt;h2 id=&#34;上海高考命题的未来:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;上海高考命题的未来？&lt;/h2&gt;

&lt;p&gt;这一节里我不敢乱说，但我相信，上海高考作为高考改革实验品，一定只会向前走，向前看。一定有人会说高考命题不可预测，所以质疑我第四节中的“知彼”观点：你怎么知道高考不会考？我想问他的是，你见过 18 年压轴题这样子像脑筋急转弯一样，没有函数的单调性、没有数列的构造求和、没有不等式放缩的第三小问吗？（如果我记忆没有偏差，反正当我走出考场，跳出了“单调性”、“不等式”的思维定势后，几分钟就想明白了抓耳挠腮四十分钟也没做出来的第三小问）&lt;/p&gt;

&lt;p&gt;历史的车轮不会倒转，时间也不会逆转。我反对刷题，支持用大脑去选择。&lt;/p&gt;

&lt;h2 id=&#34;结语:781b1d5f2b19233f5823b2354bf0c58e&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;很感谢你会看到这里，我不是什么专家学者，我只是谈谈我的一些经验、抒发一些情感。&lt;/p&gt;

&lt;p&gt;3500 字，构思了一整年，敲了大概两小时键盘，没有引经据典。所以啊，朋友们，写作文一定要留至少半小时动笔呀！（笑&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>浑浑噩噩的我</title>
      <link>http://localhost:1313/posts/hun-hun-e-e-de-wo/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/hun-hun-e-e-de-wo/</guid>
      <description>&lt;p&gt;刚刚了解到，高一时的同学在上周前往了美国参加 ISEF（国际科学与工程大奖赛），与中国队的其他成员一起奋斗争夺全球科创奖项。&lt;/p&gt;

&lt;p&gt;在我眼里，ISEF 曾是离我们遥不可及的一个赛事。高中生要在上海市科创大赛内取得一等奖，再在全国科创赛事内拿到一等奖，通过国家选拔，才能拿到 ISEF 的门票。&lt;del&gt;高一时，我曾自认为是离这个目标最近的人，也只在市内拿到了三等奖。&lt;/del&gt;（现在看来，当时的我其实是最弱的人。）
高一的我一直坚信，人的实力没有限制，普通人距离有成就的人其实只是差了一点努力的动力。只要全力奔跑，总会有成果的。
也许是当时的我太天真了，但是我仍然同意实力无限的观点。如果我一直都在奔跑的话，想必也能做出一些成果。&lt;/p&gt;

&lt;p&gt;可是，从高一下半学期到如今，我不知道我做了什么。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;不知道为什么，我失去了学习的动力。我不知道自己为了什么而学习。仔细想想，我好像从来都不知道这个问题的答案，因为我以前从来就没有思考过这个问题。等到我走出了婴儿车，扔掉了奶嘴，我就再不会直立行走了。
科创也没有再做。几年来，我的技术水平一直在原地踏步。从做垃圾 gui 起家，参加威盛的（辣鸡）机器人比赛，然后学习 Python，终日沉迷做做小工具，为自己下载网易云歌单，然后又抄抄 Wiki 代码，写写没有任何用处和技术含量的 OpenCV Demo。整天沉迷于重装重装刷机刷机，配置系统配置 Vim，压制手机流氓后台。一切安排妥当之后，好像又找不到什么事情可做，又推倒重来。
明知道自己的身上一堆问题，还是没有任何动力来解决。终日又颓废又丧，破罐破摔的同时内心又不甘心。我大概就属于&lt;a href=&#34;http://localhost:1313/post/articles/xue-xi-tai-du-sui-ji&#34;&gt;“不甘平庸却又不愿意努力的人”&lt;/a&gt;这种最无聊最惨的人吧。&lt;/p&gt;

&lt;p&gt;唯一的一点收获就是，可能我的心理年龄略微有点提升了吧。&lt;/p&gt;

&lt;p&gt;我不再是那个相信任何人，可以和任何人都敞开心扉的小孩子了。虽然说起来，小孩子的时光令人怀念，可人毕竟是要长大的。换个想法，或许我拥有比别人更长的无忧无虑的时光，也许这样也挺好。
我终于有了如人一般的情感了。可能是我用词夸张了，但是我之前一直将人的情感看成如程序代码般的存在。“因为人脑的信息都是一条条电讯号，所以人的思想和程序数据无异。”说出这种话的我大概只有最肤浅的情感与最糟糕的共情能力吧。还好，托很多事情的福，我现在有了丰富细腻的情感。思想可以存在于电讯号中，可以存在于生化信号里，也可能被写进了基因。而正是因为承载着我的思想，这一条条信号对我开始有了非凡的意义。
我开始学会不张扬自己了。其实我一直都很自卑，无时无刻不在质疑自己。但是这样的话，自己存在的理由都会被否定掉。于是，“请看着我！”，我这样想着，便像孔雀一样向所有人展现自己的一切，寄希望于别人的称赞给我带来一点存在理由，否定掉我对自己的批判。但是我明白了，这样的我只会给别人带来麻烦。自己存在的理由不是别人给的。我还是自卑，还是在质疑自己，但是我开始质疑对自己的批判，否定对自己的否定。
我开始体会他人的情感，在意他人的心情了。是的，人应该从实际出发，发挥主观能动性改变环境。但是，主观能动性不是我独有的，他人也不是一个个“客观实在”（好了，我政治零分了）。在用能动性追求自己的目标的时候，为什么不成全他人呢？因为自己的刻骨铭心，所以才会想给别人带来最好的东西。让他人不再由于自己的原因而痛苦或不愉快，甚至解决他人的烦恼，为他人的立场与应得的权利发声。这样的话，我的心里也会好受很多。&lt;/p&gt;

&lt;p&gt;然而，现在的我还是不停地自甘堕落。学业渐渐荒废，大学与人生目标越来越模糊，变得越来越丧，越来越矫情，越来越找不到活着的意义。前一阵子我还在为自己的成长而高兴，我还欢快地与旧的三观道别。可我完全没有意识到，当有一种强烈的情感摧毁掉原来的我，并且没有给我带来新的寄托的时候，整件事情将变得多么可怕。
当别人都在大跨步前行的时候，我却被自己绊倒了。知道自己不久之后就要被残酷的现实所吞没，可我爬不起来，别人也很难扶我起来。如果半年之内我不能自己走出来的话，我可能就真的完蛋了。&lt;/p&gt;

&lt;p&gt;在这片浩荡的海之中，我因为这艘船而姑且不会被淹死。可若是迟迟找不到那根引航的稻草，我也终将在这片海中孤独地死去。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>不知所云</title>
      <link>http://localhost:1313/posts/bu-zhi-suo-yun/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/bu-zhi-suo-yun/</guid>
      <description>

&lt;p&gt;和同学聊天。突然想起了我们的第一台的 FoAoN QiAnG 服务器。&lt;/p&gt;

&lt;h2 id=&#34;初二时代:21c0962302b6849a389c604d3dd6a9cd&#34;&gt;初二时代&lt;/h2&gt;

&lt;p&gt;第一台 Linode 服务器，第一次使用 Linux 操作系统，第一次学会用 Vim。&lt;/p&gt;

&lt;p&gt;在之前科学上网用的都是 GooAgggent，每天都要提早开机扫描很长时间的 IP。之后好像还在一个奸商那里买了某“麒麟” fq 服务，在外公家的电脑上，用着当时还活着的 SmartQQ 网页版在群里，用同学的支付宝账号购买的。虽然这个服务很烂，作者人也很烂。但是这是我第一次登录 Google+，第一次知道神乐坂家族，第一次打开 ingress，第一次感觉自己属于一个广阔的世界。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;随后我便知道了“影袜”。在黑洞咖啡馆找到了免费的 ss 配置。当时还要看运气，很多时候找到的服务器还非常不稳定。当时咖啡馆的域名还换了几次，我记得其中一次是 xcafe.in。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该网页无法正常运作。xcafe.in 未发送任何数据。ERR_EMPTY_RESPONSE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;后来大家商量一下，还是买一台自己的服务器吧，速度快也不用靠别人的支持维护。当时很多人在用 DO 和搬瓦工的服务器，价格也很便宜。但是看了知乎上面的评价，说 Linode 要比他们稳定很多，是“服务器中的高富帅”，就打算用 Linode 了。&lt;/p&gt;

&lt;p&gt;同学找了一批朋友，大家一起合租出钱，每月集资买了这台 70 元/月的服务器。当时这笔钱对我来说是巨款。当时我初二。&lt;/p&gt;

&lt;p&gt;那个时候群里还只有我一个人会维护服务器，会从头搭建影袜。一年后我的森海塞尔耳机损坏，是从这个群里的群友手里收了一付 ATH ES-700。400 入，现在还在使用。现在这个群里面不乏有人已经能自己配置服务器，自己出去卖钱了。&lt;/p&gt;

&lt;p&gt;大概就是在这个时候，我和另一群在 vb 吧上结识的朋友打算做一个团体网站。那时很流行这种学生小作坊，大家也都有自己的网站。我们取名叫做 Dojiang 豆浆。和 dojiang.org 域名的所有者谈判，他决定在自己的博客上开放投票，票数最高的人可以获得这个域名。在大年初一的时候大家一起刷了 30 多个代理在博客上投票，最终刷了 100 多票，顺利拿到域名。我至今还记得当时拿到域名的喜悦。安装了 wordpress 博客系统，一开始用的是别人的虚拟主机，后来迁移到了这台 Linode 上。&lt;/p&gt;

&lt;p&gt;也大概是这个时候，初中班主任要搞一个班级网站。我和几个要好的同学一起商量网站的设计，班长写文案。当时一起设计网站的几个同学，现在还维持着定期的联系。也大概是在这个时候，我发现了“多梦” Wordpress 主题。当时多梦的域名是 dmeng.net，之后迁移到了 dmeng.com。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;无法访问此网站。找不到 dojiang.org 的服务器 IP 地址。ERR_NAME_NOT_RESOLVED
dmeng.net 在约三年前关站，至今还在“建设中”。dmeng.com 已经变成了一个公司的官网。
班级网页无疾而终。ppcj2016-1.tk 早就被回收。
两年前至今，我再也没有使用过 Wordpress。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;初三时代:21c0962302b6849a389c604d3dd6a9cd&#34;&gt;初三时代&lt;/h2&gt;

&lt;p&gt;之后由于大家抱怨服务器太慢，我在&lt;a href=&#34;https://vnet.link/&#34;&gt;微林&lt;/a&gt;上购买了 vxTrans 国内中转服务。当时微林的收费策略很坑，计算一下不如自己购买国内阿里云服务器做中转。第一台阿里云服务器，上海可用区。&lt;/p&gt;

&lt;p&gt;初二到初三的暑假。Linode 的服务器大概就在这个时候逐渐被干扰，大家抱怨使用越来越不稳定。而国内中转的流量有限，也不能一直用国内中转。这个时候我了解到了所谓的 CN2 网络，于是瞄准了 ConoHa 服务器。当时我还是个狂热的二次元，对于萌的东西基本没有抵抗力。所以开始使用 ConoHa 的新加坡服务器。当时还在折腾初代的 SSPanel，把整个网页的背景全部改成了 ConoHa 的看板娘，还将语言萌化了。第一次涉足网页前端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/conoha.jpg&#34; alt=&#34;ConoHa 看板娘&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ConoHa 服务器现在早就被国人挤爆无法使用。初代 SSPanel 在 Github 上的 Repo 早已经消失，我也不再使用 SSPanel 管理流量了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;随后国内中转服务器因为费用的问题彻底无法运行下去，而尝试了 Linode 的美国节点之后又不如人意。2016 年 7 月底，我换用了 Sakura 服务器。160.16.108.208。这台服务器使用的时间很长，直到大概半年前代购商家被 Sakura 清算封禁才被强制关闭。当时还在使用 serverSpeeder 网络加速器的 20M 免费正版。如今 serverSpeeder 已经倒闭了，服务器上还在运行的版本全都是无带宽限制盗版。&lt;/p&gt;

&lt;h2 id=&#34;高中时代:21c0962302b6849a389c604d3dd6a9cd&#34;&gt;高中时代&lt;/h2&gt;

&lt;p&gt;当时正值初升高。看到高中实验楼的同学还在使用蓝灯这种工具，我本来想把我的代理卖给他们开拓市场。这件事情后来我也不再谈论了。也就是这年 8 月，我参加了 CRC 机器人竞赛，开始使用 Python 和 OpenCV，彻底告别了 VB。&lt;/p&gt;

&lt;p&gt;这个时候开始，我断断续续地写起了博客。但是当时真的非常不认真，与其说是写博客不如说是在玩博客程序。我还记得那个下午，运动会，同学们都在操场上奔跑，我在实验楼的机器人教室搭建 Ghost 博客平台。向窗外一瞥，她在跑道上飞奔着，他在跑道上飞奔着。当时好像一次古文翻译，我在翻译“杨成斋”（杨万里）的名字时口误说成她的名字。之后将错就错，就给她取了“杨成斋”的绰号。&lt;/p&gt;

&lt;p&gt;好像这个时候 SS 作者被请喝茶停止了开发，SSR 接手。我用上了 Telegram，也时不时能在 G+ 和 Telegram 群组上说上一两句废话。加入了华二几个同学的小群。他们是我在 CRC 赛场上认识的。其中一名原来是 &lt;a href=&#34;http://www.team6353.com&#34;&gt;Zodiac&lt;/a&gt; 的主要程序员和主导者，现在 Zodiac 队的官网仍然沿用他开发的版本。之后参加科创大赛的时候我们一起在星巴克做题，还用了他安装在树莓派上的&lt;a href=&#34;https://github.com/SkyZH/prosea&#34;&gt;思海&lt;/a&gt;题库辅助做题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;科创大赛就只拿了个三等奖。
华二的同学不久后就退出了 FRC 队伍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;如今:21c0962302b6849a389c604d3dd6a9cd&#34;&gt;如今&lt;/h2&gt;

&lt;p&gt;之后的故事离今天太近了，回忆中断，时间又回到了今天。同学撸羊毛，买了阿里云海外版的新加坡 ECS。Sakura 被商家误删，重开。中转到期。春节新加坡服务器阵亡，新开一台。如今开始撸 Azure 的羊毛。&lt;/p&gt;

&lt;p&gt;106.185.37.166。139.196.21.241。163.44.139.38。160.16.108.xxx。47.74.190.xx。真的好奇怪。这一串串数字，在我心中有着最独特的意义。这几年来，我总是觉得时间过得非常模糊，不知道什么事情发生在什么时候。但是这一个个 IP 地址，将我的记忆串成一条线，是我心中独有的时间戳。同样的，还有 Linux 内核的版本号，还有手机刷机的一个个固件。从 S60V5 到伪 Belle。从 CM，到 Lineage。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;系统重装多次，known_hosts 已经不知道清空了几遍。早就不知道有多少个 IP 被我忘却。一个个 IP 被我申请，又被我删除，或是被屏蔽。一个个域名被注册，然后被弃用。SSPanel，SSR，ppcj2016，dojiang，dmeng，伴随着一段段回忆，一段段友谊，被时间埋葬。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;哭的满键盘都是泪水，好像送走一个至亲的亲人一般悲伤而绝望。算了吧，这就是一个不珍惜时光和回忆的少年的胡话罢了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/wang-zi-fei-bo-yu-hao-gao-wu-yuan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/wang-zi-fei-bo-yu-hao-gao-wu-yuan/</guid>
      <description>

&lt;p&gt;﻿---
title: 妄自菲薄与好高骛远
date: 2018-08-25 00:23:00
tags:
  - 想法
categories:&lt;/p&gt;

&lt;h2 id=&#34;心灵花园:0e20367dd552bcc2400b68b68db70794&#34;&gt;- 心灵花园&lt;/h2&gt;

&lt;p&gt;仔细一看，博客已经两个多月没动过了啊。。不对，之前还贴了一篇学校的作业来凑数，这样算来已经整整三个月没有更新过博客了。刚刚补完作业洗澡，稍微想多了一点，就想记录下来。因为是临时有感而发，会想到什么说什么，估计本来可怕的逻辑和文笔会更加糟糕。嘛，这里就姑且饶过我吧，毕竟是一次正经的博客除草。
这一年半的生活经历真的给我带来了很大的冲击和改变。从后知后觉无忧无虑，到试着开始思考，到忧虑过度，此后走火入魔地失去自我，再至如今平静下来，心境真的是一月一变。这可能就是青春吧，多变而又脆弱的自我，我姑且也算是开始习惯这样的变化了。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;洗澡的时候试着梳理经历的一堆事情的来龙去脉，这其中似乎有着有趣的规律。我自己的心理困扰，或者是我身边一些正在发生的问题，其原因也许都是对个人能力的错误估计与理解。有时候是妄自菲薄，高估了目标的难度，从而主动放弃。而也有时候是因为把自己看的太高，好高骛远，最终只能在暗淡中退场。
我一直在思考一个奇怪的现象：当人回首斟酌过去的自己所作出的成就时，就如同在山上向下俯瞰自己所走过的山路。看似道阻且长，但自己的亲身感受却没那么可怕。这其中很大一部分会是天赋的原因，毕竟 99%的努力必须建立在 1%的才能之上。还有一部分应该是由于和自己的“相性”，也就是说个人兴趣比较契合，或者是“做起来就是不感觉累”这种旁人听来会气愤，但是却完全由衷的理由。背后的原因可能有很多，但最终的结果就是，自己达成这个目标所要付出的东西比别人看来少。
从小，在我的心中一直都有着两份向往。其中一份是我的文艺之梦，还有一份是对信息科学的热爱。前者的结晶就是我的电子琴爱好与技术，而后者则化作无数我日日夜夜编写的程序与参加的比赛。在两个梦想共同的开始——也就是九年前的我看来，这两个目标的难度大概差不多。但是，为了达成前者的目标，我不知付出了多少充满泪水的日夜，而后者的实现，似乎没有给我留下多少痛苦的回忆。同样地，对于学习，以前的我认为交大附中是一个遥不可及的地方，是我绝对不可能到达的地方。而在今天的我看来，当初只是稍微放了些心思在学习上，作业做到凌晨一点并不是那么痛苦的事情，付出这点代价又何妨？可若是把这套理论放在他人身上，也很有可能不成立吧？大概，有些事情不去尝试一下，是永远不知道其难度所在的。对事物难度的成见是一种巨大的毒害。如若在一切开始之前就说：“这个目标的难度实在不切实际了”，其实可能就扼杀了一个优秀的未来的自己。只有尝试了，才能正确评估自己的能力，在这之后再经由各方面的判断来确定是否进行下去。也就是说，告诉别人如若“机器学习也就这么点简单算法，很好学的” “物理？这不是天生就会的吗？”这样的话，也许是极端不负责任的。或者在 &lt;strong&gt;尝试一件事物之前&lt;/strong&gt; 就给自己判个死刑：“天呐！这个学生和我一个年纪就能参加乐队了！” ”我去，清北复交巨佬！我们不是一个世界的人“ 这种做法对自己或许也不太妥当。在这种 试试又何妨 的事情上，自我的估计偏差是可以由尝试而弥补的。多追求，多尝试，我觉得是一种很好的做法。或许在一段时间的努力之后，我会发现，目标离自己并不是那么遥远。
……………………………………
但令我不安的是，很多时候，浅尝辄止式的尝试是不能对自己的能力和目标的难度作出正确的判断的。错误的目标估计和其带来的错误奋斗与错误满足，往往会成为各种各样的灾难。
前两天有熟人和我抱怨一群技术人员带来的一场闹剧。简单来说，这群人想要实现一台手持式的眼底疾病诊断仪，将产品的售价从如今的二十万压到数千元。投资人已经找好，项目马上就要进行演示。但是他们本来认为很简单的光路设计与程序编写却出了很大的偏差。图像模糊，算法无从下手...... 一开始尝试时根本没有考虑过的问题接踵而至，让他们忙得焦头烂额。由于他们之前对项目难度的错误估计，预定的演示目标根本无法实现。
如今深度神经网络大热，到处都在讨论相关的内容。我认识的一位新交大 IEEE 重点班学长刚刚加入班群，就被扑面而来的神经网络讨论而淹没。对于连本科数学知识都没有的学生来说，神经网络不是我们可以涉足的领域。但是由于神经网络可以套用现成的成果，胡乱修改也可能出不错的成果，这给很多人带来了错误的认识与预期。盲目地修改配置数字一开始可能会出一些喜人的结果，但绝对不可能持续。不仅学生群体有错误认知，在社会上，一家又一家人工智能公司也在不停地出现，却也不停地消亡。这正是 21 世纪的炼丹术，当化学的萌芽还未出现，长生不老最终也只能是一场迷信与空想。
生活中有太多的事物存在着这样的陷阱。看似非常简单的目标，会被一个又一个”小问题“所阻碍，最后走向覆灭的边缘。”我们开始的条件非常良好，能力也很优秀，但是为什么会被这些预料之外的破事绊住手脚，为什么就是做不到！“，我的一位机器人社团的学长如是说。其实，根本就不存在什么小问题。这些”破事“恰恰是一个个问题的关键，自己的能力可能根本就没有达到实现相应事物所需要的水准。这些错误的估计，只有当自己发现错误的时候才会显现出来。这些跟头，是必定会摔下的。而跌跟头的过程，也就是所谓”阅历“的一部分。这就如人行走一般，迈出的每一步都是一个跌倒的过程。或许在这个年龄，跌跟头本来就是一种常事。不，就算是人成长了，陷阱与跟头肯定也会常伴。最好的办法也许就是在行走时把重心放低，一开始就做好自己能力不足的准备，做好跌倒的预备动作，在倒下的时候不至于慌乱，而能腾出自己的双手将自己撑起。
为了发挥自己真正的能力而大胆尝试，与为了不让自己受伤而放低自己的预期，这两者看似是矛盾的。我也一直对这对矛盾感到迷茫。但是我觉得，不应该因为可能高估自己而受伤而放过任何前进的机会。多做，多试，永远是对自己最负责的做法。同样地，在尝试的过程中，时刻要做好止损的准备，做好”前行的路上可能有最黑的黑暗存在“这样的打算，让自己做好万全的准备来迎接新的挑战。再说，青春本来就是尝试的最好时机。今天，错误与失败带来的后果远比工作时遇到的小得多。在这段时间里去冲击，去实现最好的自我，同时认识到自己可能的不足，学会看到自己的缺点，放下自己的身段，这是我所能想到的最好的做法。
哇，已经两点零七了。本来还想多写一点更个人更情感上的想法的，可不知不觉时间就过去了，文章的思路也偏得理性了。现在真的脑壳疼，估计再写下去文章就要更不知所云了。如果时间允许的话（咕咕咕），明天我大概会整理一下最近心理上的变化与反思，再写一篇随笔发布吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;咕了 作业太多了😢 有时间补吧&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>57ud5pyb</title>
      <link>http://localhost:1313/posts/57ud5pyb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/57ud5pyb/</guid>
      <description>&lt;p&gt;这是篇混淆过的文章&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;5oiR5ZKM5L2g77yM5p6c54S25piv5LiN5LiA5qC355qE5ZCn44CC44CC5YWJ5piv5oSP6K+G5Yiw6L+Z5LiA54K5IO+8jOaIkeWwseeXm+iLpuW+l+WPl+S4jeS6huOAguKAnOaxguWQjOWtmOW8guKAnei/meS4gOeCue+8jOaIkeaDs++8jOaIkeS7rOmDveWBmuS4jeWIsOWQp+OAguaYjuaYjuaciemCo+S5iOWkmuWFseWQjOivreiogO+8jOaciei/keS8vOeahOWWnOWlve+8jOaciei/keS8vOeahOS4lueVjOingu+8jOaciei/keS8vOeahOi/veaxgu+8jOS4uuS7gOS5iOaIkeS7rOS5i+mXtOi/mOaYr+aciemCo+S5iOWkp+eahOS4jeWQjOWRou+8n+S4uuS7gOS5iOS6uuS8muWWnOasouS4iuWPpuS4gOS4quS6uuWRou+8n+S4uuS7gOS5iOS6uuS8muebuOS6kumdoOi/ke+8jOWNs+S9v+aXqeW3suefpeaZk+acgOe7iOS8muaypuS4uuS6kuebuOS8pOWus++8n+aIkeecn+eahOS4jeaHguS6hu+8jOaIkei/nuiHquW3semDveS4jeaHgu+8jOabtOS4jeWPr+iDveaHguW+l+S9oOS6huOAguS4jeihjO+8jOaIkeW3sue7j+S4jeiDveato+W4uOWcsOaAneiAg+S6hu+8jOS4gOaDs+WIsOi/meS6m++8jOiDuOWPo+WwseacieWlh+aAqueahOaEn+inieOAguWNiuW5tOWJjeaIkei/mOS7peS4uuaIkeS4jeWPr+iDveS8muaLpeaciei/meagt+eahOaDheaEn+eahO+8jOeOsOWcqOWNtOiQveWFpeS6hui/meagt+eahOmZt+mYseOAguWlveaDs+iDveWSjOS9oOWAvuivieaIkeeahOW/g+WjsO+8jOWlveaDs+acieS4quS6uuiDveeQhuino+aIkeeahOWGheW/g+OAguS9huaYr++8jOi/meaYr+S4jeWPr+iDveeahOWViuOAguS6uuWSjOS6uuecn+eahOa0u+WcqOS4jeWQjOeahOS4lueVjOmHjO+8jOS6uuWSjOS6uuawuOi/nOS4jeiDveWujOWFqOebuOS6kueQhuino+OAguKAnOaIkeWWnOasouS9oOKAne+8jOi/meagt+eugOWNleeahOivneivreaIkemDveS4jeiDveS8oOi+vuWHuuadpe+8jOaIkeS4jeaVouS8oOi+vuWHuuadpeOAguS9oOeahOW/g+Wig+iCr+WumuWSjOaIkeS4jeS4gOagt+WQp+OAguaYjuaYjumCo+S5iOWWnOasouS9oO+8jOWNtOS4gOebtOmDveS4jeiDveWdpueOh+WcsOmdouWvueS9oOOAguaYjuaYjuaIkeaDs+ivtOeahOmDveS4jeaYr+i/meS6m+eahOOAgueci+edgOS9oOWkseWOu+W4jOacm+iHqueUmOayieaypu+8jOeUqOS4gOWxguWxgumYsuW+oeW/g+eQhuS/neaKpOS9j+iHquW3se+8jOaIkeeahOW/g+S5n+WDj+WIgOe7nuS4gOiIrOWcsOW/g+eXm+WViuOAguaIkeebuOS/oeS9oOacgOWQjui/mOaYr+S8muaVnuW8gOW/g+aJieeahO+8jOS9huaYr+iDveiuqeS9oOaVnuW8gOW/g+aJieeahOiCr+WumuS4jeaYr+aIkeOAguaIkeWkqui+g+ecn+S6hu+8jOaIkeeahOaAneaDs+WkqueQhuaDs+WMluS6huOAguaIkei/meagt+avj+WRqOavj+WRqOWcsOaZmuS4iuadpeeDpuS9oO+8jOS9oOS5n+aEn+inieW+iOe0r+WQp+OAguaYjuaYjuS4jeaDs+iuqeWIq+S6uuWbsOaJsOeahO+8jOS9huWIsOacgOWQjuWNtOWPmOaIkOS6hui/meagt+OAguOAguS4uuS7gOS5iOWRgO+8jOS4uuS7gOS5iOaIkeaJgOi/veaxgueahOS4nOilv+mDveW+l+S4jeWIsOOAguOAguS4uuS7gOS5iOaIkeabvuiUkeinhueahOS4nOilv+acgOe7iOmDveS8muaXoOaDheWcsOWHu+eijuaIkeeahOW5u+aDs++8jOS4uuS7gOS5iOaIkeaJgOePjeinhueahOS4nOilv+awuOi/nOS4jeiDveeVmeWtmO+8geivtOWIsOW6le+8jOi/memDveaYr+aIkeeahOmXrumimOWQp+OAguWWnOasouS4iuS9oOeahOaYr+aIke+8jOWSjOS9oOS6ieiuuueahOaYr+aIke+8jOWwj+WtqeWtkOawlOeahOaYr+aIke+8jOaciemCo+S5iOWkmuW/g+eQhuaIj+eahOaYr+aIkeOAguWvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t+WvueS4jei1t++8gQoK5Yiw5pyA5ZCO77yM5oiR5Lya5Lqy5omL5q+B5o6J6Ieq5bex5ZCn44CC&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5oSa6KCi77yB</title>
      <link>http://localhost:1313/posts/5oSa6KCi77yB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/5oSa6KCi77yB/</guid>
      <description>&lt;p&gt;这是篇混淆过的文章
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;5oiR55yf55qE5piv5aSq6KCi5LqG77yM5rC46L+c5oqK6Ieq5bex55qE5oCd6ICD57uZ5omY5LuY5Zyo5Yir5Lq66Lqr5LiK44CC6LSo55aR77yM6LSo55aR77yM5o6l57qz77yM5o6l57qz77yM5LuO5p2l5bCx5rKh5oOz6L+H6Ieq5bex5Y675bCd6K+V77yM6Ieq5bex5Y6755CG6Kej44CC5b+D54G155u46YCa77yf5LiN77yM5oiR5Y+q5piv5oOz6YCD6YG/5oCd6ICD6ICM5bCG5YW25omY5LuY5Zyo5Yir5Lq655qE6Lqr5LiK572i5LqG77yM5oqK6Ieq5bex55qE56C056+T5a2Q5omj5Zyo5Yir5Lq66Lqr5LiK77yB55yf55qE5piv5aSq6KCi5LqG77yB5aW95YOP5piv5LiA5Liq5aSx6a2C6JC96a2E55qE54uX77yM5LuO57uP6L+H55qE5Lu75L2V5Lq66Lqr5LiK6L+95rGC5bqH5oqk77yB5rKJ5rW45Zyo6Ieq5bex55qE5qKm5aKD5Lit77yM5Y205ZCR5LuW5Lq66K+i6Zeu5aaC5L2V6LWw5Ye65qKm5aKD77yB5pCe56yR77yB6L+Z5qC35oiR6L+Y5pyJ6Ieq5oiR5ZCX77yf5oqK6Ieq5bex5bCB6Zet6LW35p2l77yM54S25ZCO5LiN5pat5oqK6Ieq5bex5Y+Y5oiQ5Yir5Lq655qE5qih5qC344CC5pyJ5oSP5oCd5ZCX77yf5oC75Zac5qyi5qy66aqX6Ieq5bex77yM54S25ZCO55So5ZCE56eN55CG55Sx5p2l5pCq5aGe6Ieq5bex55qE6ZSZ6K+v5LiO5aSx6LSl44CC5b6I5aSa6Zeu6aKY5LiN5piv5Yir5Lq66IO95biu5oiR6Kej5Yaz55qE77yM5Lmf5LiN5piv5ZCR5Yir5Lq65YC+5YCS6Ieq5bex55qE5oCS54Gr5bCx6IO96Kej6ISx55qE44CC6Ieq5bex55qE5oSa6KCi5LiO6L+H6ZSZ6KaB55Sx6Ieq5bex5p2l5om/5ouF77yM6Ieq5bex55qE5pyq5p2l6KaB55Sx6Ieq5bex5p2l6LWw44CC5pW05aSp5ZCR5Yir5Lq657Si5Y+W77yM5oiR6Ieq5bex6IO957uZ5Yir5Lq65LuA5LmI44CC562J552A5Yir5Lq65p2l5ouv5pWR6Ieq5bex77yM5oiR6IO957uZ5Yir5Lq65LuA5LmI5ZCX77yM5oiR6Ieq5bex5LiN5oOz5ouv5pWR6Ieq5bex5ZCX77yB5om+5ZCE56eN5ZCE5qC355qE5YCf5Y+j77yM5oiR5LiN5oSf5Yiw576e5oSn5ZCX77yB6Ieq5bex5oOz6KaB54+N5oOc55qE5Lic6KW/77yM6Ieq5bex5pS+57q16Ieq5bex5Y675Lqy5omL5q+B54Gt5o6J77yB5aaC5p6c5oiR5LiA55u05piv6L+Z5Liq5oCn5qC855qE6K+d77yM6YKj5oiR5bCx5Y+q6YWN5rS75oiQ546w5Zyo55qE5qC35a2Q77yB&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Letter Song</title>
      <link>http://localhost:1313/posts/letter-song/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/letter-song/</guid>
      <description>&lt;p&gt;&lt;center&gt;
好きな人と歩いた場所も
その時見た景色も
振り返らず 今を駆け抜け
私は何と出会うの
立ち止まるほど
意味を問うほど
きっとまだ大人ではなくて
今見てるもの
今出会う人
その中でただ前だけを見てる&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;10 年後の私へ
今は幸せでしょうか
それとも悲しみで
泣いているのでしょうか
けどあなたの傍に
変わらないものがあり
気付いていないだけで
守られていませんか
過ぎし日々に 想いを预け
時間だけ ただ追いかけてく
背に寄り添った 誰かの夢に
振り向ける日がいつか来るのかな
10 年後の私へ
今は誰を好きですか
それとも変わらずに
あの人が好きですか
けどいつか
知らない誰かを爱する前に
自分のことを好きと
言えるようになりましたか
大切な人たちは
今も変わらずいますか
それとも遠く離れ
それぞれ歩んでますか
けど そんな出会いを
别れを 缲り返して
今の私よりも
すてきになっていますか
10 年後の私へ
今がもし幸せなら
あの日の私のこと
思い出してくれますか
そこにはつらいことに
泣いた私がいるけど
その涙を優しく
思い出に変えてください&lt;/p&gt;

&lt;p&gt;曾和喜欢的人一起走过的地方
那时曾看到的景色
统统抛掉 不再回头 向前飞奔
我将会遇见些什么呢
驻足不前
探索意义
一定是我还不够成熟
现在看到的事物
现在遇见的人
在这片纷繁喧嚣之中 我只会看向前方
致十年以后的我
现在的你感到幸福么？
还是正沉浸在悲伤中
默默地流着泪？
不过在你的身旁
依然会有不变的存在
未能察觉的你
依然在被守护着吧
把思念寄托于流逝的日子里
只有时间在不停的追赶
托付在我肩上的 是谁的梦想
总有一天必须要面对的吧
致十年以后的我
现在的你喜欢着谁呢？
还是和以前一样
继续喜欢着那个人呢？
不过 现在的你
在爱上某个人之前
“喜欢自己”这句话
能否先说出来呢
我所珍爱的朋友们
依然在反复平凡的生活吗？
还是已经远去
踏上了各自的旅途
但是在重复了无数次的相遇
和离别之后
是否比现在的我
更有魅力呢？
致十年后的我
如果现在的你是幸福的
从前的我
能否请你想起来呢
回忆中的我
一定在伤心的哭泣吧
请将这温柔的泪水
融入记忆的海洋
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=27571001&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim 下使用 Microsoft Python Language Server 补全</title>
      <link>http://localhost:1313/posts/microsoft-pyls-in-vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/microsoft-pyls-in-vim/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;自从上次咕咕咕之后，博客又长草了三个月（逃。当然，我也没想到咕咕咕之后写的第一篇文章竟然是一篇技术文。等等，我最初开这个博客的目的就是写点杂七杂八的技术吧？那我写一些技术类的东西也不会显得奇怪吧？呐？不会吧？（一个作着文青梦的理工生突然醒悟）啊，意识流的内容我也没想断更，具体以后会写什么东西还是随缘 233&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;初衷:73fe333ef1410e42088669a13cfeffa5&#34;&gt;初衷&lt;/h2&gt;

&lt;p&gt;首先我是个 Vim 教徒，在 Vim 下写 Python 也写了一年多了。自然，Python 补全肯定是一直在用的。我之前用的一直是基于 Jedi 的补全方案，效果也不错，就是补全出现速度稍微有一点～点慢。不过由于用了异步的补全框架 &lt;a href=&#34;https://github.com/ncm2/ncm2&#34;&gt;ncm2/ncm2&lt;/a&gt;，所以觉得海星（这里先提一个醒，我之前一直在用的 &lt;a href=&#34;https://github.com/Shougo/deoplete.nvim&#34;&gt;Shougo/deoplete&lt;/a&gt; 有坑，用起来觉得超级卡，还甩锅 Jedi，等换了 ncm2 之后丝般顺滑...）。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;最近发现微软造了个新轮子，把 VS Studio 里的 Python 语义补全拿出来了，听说效果很不错，而且已经有 Emacs 社区的大神成功将其引入 Emacs（中文：&lt;a href=&#34;https://emacs-china.org/t/microsoft-python-language-server/7665&#34;&gt;Emacs China&lt;/a&gt; 英语：&lt;a href=&#34;https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/&#34;&gt;vxlabs&lt;/a&gt;）。听已经用上的人说，补全速度极快，而且由于用的是 C#，后台是多线程进行分析的，效率很高。这激起了我想在 Vim 上吃上微软 Python 补全螃蟹的欲望。&lt;/p&gt;

&lt;h2 id=&#34;lsp:73fe333ef1410e42088669a13cfeffa5&#34;&gt;LSP&lt;/h2&gt;

&lt;p&gt;既然 Microsoft Python Language Server（下称 mspyls）是微软实现的，它的通讯接口自然是微软自己提出的 Language Server Protocol（下称 lsp）。这个协议正在逐渐成为各类补全服务的通用统一协议。对于 lsp 的详细介绍，可以从&lt;a href=&#34;https://langserver.org/&#34;&gt;这个&lt;/a&gt;地方了解。简单地来说，它可以让语言分析实现和前台的 IDE 或者文本编辑器分离，让文本编辑部分和语言补全分析部分解耦，从而可以任意搭配。也就是说，如果我想在 Vim 上补全 Python，我既可以用 mspyls，也可以用 jedi。反过来，如果我想用 mspyls 补全，我既可以用 Vim，也可以用 Emacs， 当然 VSCode 和 Atom 什么的都可以。正是因为这个原因，mspyls 有强大的泛用性，可以很容易地在 Vim 上跑起来。
细节上来说，LSP 基于 JSON-RPC，可以通过 stdio 通信，也可以用 tcp 通信（所以 IDE 和语言服务可以跑在不同的机器上哦～）。关于现在有哪些语言服务能用，以及有多少编辑器可用，都可以在 &lt;a href=&#34;https://langserver.org/&#34;&gt;langserver&lt;/a&gt; 上查到。&lt;/p&gt;

&lt;h2 id=&#34;编译-mspyls:73fe333ef1410e42088669a13cfeffa5&#34;&gt;编译 mspyls&lt;/h2&gt;

&lt;p&gt;由于我用着 Linux，所以下面的指令只适用 Linux，Windows 平台的话编译过程应该没差多少吧，网上应该也有不少的资料。
首先安装 .net core，Archlinux 下就可以直接 sudo pacman -S dotnet-sdk 一键解决（吹爆我大 Archlinux 神教！）
然后 git clone &lt;a href=&#34;https://github.com/Microsoft/python-language-server&#34;&gt;https://github.com/Microsoft/python-language-server&lt;/a&gt;
进入刚刚 clone 下来的 repo，到 src/LanguageServer/Impl 下，然后&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;$ dotnet build -c Release
Microsoft (R) Build Engine version 15.9.20.62826 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 51.1 ms for /home/lightquantum/ms_pyls/python-language-server/src/Analysis/Engine/Impl/Microsoft.Python.Analysis.Engine.csproj.
  Restore completed in 91.75 ms for /home/lightquantum/ms_pyls/python-language-server/src/LanguageServer/Impl/Microsoft.Python.LanguageServer.csproj.
  Microsoft.Python.Analysis.Engine -&amp;gt; /home/lightquantum/ms_pyls/python-language-server/output/bin/Release/Microsoft.Python.Analysis.Engine.dll
  Microsoft.Python.LanguageServer -&amp;gt; /home/lightquantum/ms_pyls/python-language-server/output/bin/Release/Microsoft.Python.LanguageServer.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:07.36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不出意外，就可以在 ../../../output/bin/Release 下找到 Microsoft.Python.LanguageServer.dll，用 dotnet Microsoft.Python.LanguageServer.dll 命令运行一下，没有报错（也没有回显 - -）就成功了！&lt;/p&gt;

&lt;h2 id=&#34;languageclient-neovim:73fe333ef1410e42088669a13cfeffa5&#34;&gt;LanguageClient-neovim&lt;/h2&gt;

&lt;p&gt;在 Neovim 上其实已经有很多 LSP 的客户端插件了，个人用下来最完全体的，是 &lt;a href=&#34;https://github.com/autozimu/languageclient-neovim&#34;&gt;autozimu/languageclient-neovim&lt;/a&gt;。
首先，安装插件就不细说了，vim-plug 或者 dein 都是可以的（就是 Vundle 已经停止维护了，如果还在用 Vundle 的话，还是尽快切换成前两者吧），针对选择困难症，我无脑推荐 dein。为什么？因为我用的就是 dein（233
之后，需要对插件进行一些配置，将 Python 的默认语言服务从 Jedi 实现改成 mspyls。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;记得修改&amp;lt;...&amp;gt;到你刚刚编译的目录！&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;let g:LanguageClient_serverCommands = {
    \ &#39;python&#39;: [&#39;/usr/bin/dotnet&#39;, &#39;exec&#39;, &#39;/&amp;lt;...&amp;gt;/output/bin/Release/Microsoft.Python.LanguageServer.dll&#39;]
\ }
let g:LanguageClient_loggingFile = &amp;quot;/tmp/LC.log&amp;quot;
let g:LanguageClient_loggingLevel = &amp;quot;DEBUG&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于微软的 LSP 实现稍微有一点方言（微软：对，我说什么就是什么，sorry，我提的协议我就可以为所欲为～），所以需要在初始化时传入一点参数。
在项目目录下（或者是要编辑的 py 文件的同目录下创建 .vim/settings.json，然后写入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;{
  &amp;quot;enabled&amp;quot;: true,
  &amp;quot;initializationOptions&amp;quot;: {
    &amp;quot;displayOptions&amp;quot;: {
      &amp;quot;preferredFormat&amp;quot;: &amp;quot;plaintext&amp;quot;,
      &amp;quot;trimDocumentationLines&amp;quot;: true,
      &amp;quot;maxDocumentationLineLength&amp;quot;: 0,
      &amp;quot;trimDocumentationText&amp;quot;: true,
      &amp;quot;maxDocumentationTextLength&amp;quot;: 0
    },
    &amp;quot;interpreter&amp;quot;: {
      &amp;quot;properties&amp;quot;: {
        &amp;quot;InterpreterPath&amp;quot;: &amp;quot;&amp;lt;...&amp;gt;&amp;quot;,
        &amp;quot;UseDefaultDatabase&amp;quot;: true,
        &amp;quot;Version&amp;quot;: &amp;quot;&amp;lt;...&amp;gt;&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;还是记得改 &amp;lt;...&amp;gt;！InterpreterPath 就是 Python 解释器的路径，Linux 下一般是 /usr/bin/python，可以用 whereis 命令来找。Version 就是 Python 版本，我个人是 3.7.0。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实是有一种方法，可以对 Python 全局设定 LSP 参数，不用创建局部的配置文件。然而，我比较懒不想配置了 233，各位可以去 LanguageClient 的 Github 页面，参照例子修改 233&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;补充 例子在 &lt;a href=&#34;https://github.com/autozimu/LanguageClient-neovim/wiki/yaml-language-server&#34;&gt;yaml&lt;/a&gt; 页面里，里面的 Method 2 就是了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这之后不要忘了装一个补全框架，Vim 默认的实现其实挺不顺手的。个人建议用一些异步的实现，比如之前提到的 ncm2。记得查看插件的 Github Repo，有一些依赖和配置建议。不看的话很有可能会报出一大堆错啊 233
如果你用了 ncm2，还可以对补全设定加上一些小 tweaks。我个人用的配置是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;&amp;quot; 这里是对于 Multiple Cursors 插件的 workaround，没有这个插件的话就不用了
function g:Multiple_cursors_before()
  call ncm2#lock(&#39;multiple_cursors&#39;)
endfunction
function g:Multiple_cursors_after()
  call ncm2#unlock(&#39;multiple_cursors&#39;)
endfunction
&amp;quot; 不要自动插入补全结果，不要自动选中第一补全，只有一个补全项的时候也显示出来
set completeopt=noinsert,menuone,noselect
&amp;quot; 所有 Buffer 都启用 ncm2
autocmd BufEnter  *  call ncm2#enable_for_buffer()
&amp;quot; Tab 键轮选
inoremap &amp;lt;expr&amp;gt;&amp;lt;tab&amp;gt; pumvisible() ? &amp;quot;\&amp;lt;c-n&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;tab&amp;gt;&amp;quot;
&amp;quot; 退出补全的时候自动关闭补全菜单
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
&amp;quot; 有补全菜单的时候回车时，不仅关闭补全菜单，再加上一个回车（默认行为是吃掉这个回车，很多时候代码写快了，一个回车按下去没有反应还是很烦心的）
inoremap &amp;lt;expr&amp;gt; &amp;lt;CR&amp;gt; (pumvisible() ? &amp;quot;\&amp;lt;c-y&amp;gt;\&amp;lt;cr&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;结论:73fe333ef1410e42088669a13cfeffa5&#34;&gt;结论&lt;/h2&gt;

&lt;p&gt;不出事故的话，补全应该已经可以用了～（虽然我觉得，应该有不小的概率会出毛病，我之前就调了两个钟头... 因为会出问题的地方太多了，我也不清楚具体会有哪些环节出问题 QAQ 如果出了问题，就只能一点点查了。而且好像 Vim 上的 mspyls 基本没人研究，资料应该挺少的 emm）
试了一下，发现... 诶？速度好像是可以，基本是秒出补全，半秒都没有，估计只有几十毫秒的 lag。可是这为啥每次补全之前的初始化要那么久啊？一个小的脚本需要四五秒之后才能开始补全，大的项目的话，有人初始化整整初始化了 4 个小时- -。还有，好像有些 module 的补全提示有点问题，比如 requests 的 get 方法拿到的对象，补全都是 built-in functions，根本没有在能用的方法... 还有各种奇奇怪怪的 import 问题，可以在 repo 的 issues 下看到。
巨硬你怎么回事？说好的 intelliSense 呢？你这个一点都不 intelli 吧？嘛算了，毕竟还是个 alpha，有各种问题还是很正常的。说不定过个半年，就会完善了吧～反正先留着配置，到时候出了新版本，reset 然后 clone 一下，再编译一下，也能无缝升级。坐等微软补完这个引擎，养肥了就能体验完全体的 intelliSense for Python 了～
这里另外推荐一些别的插件，如果用 jedi 补全的话，可以不用 lsp 实现，直接装 ncm2/ncm2-jedi 就可以了，lint 和 autofix 的话，个人喜欢 ALE。高亮增强的话，&lt;a href=&#34;https://github.com/numirias/semshi&#34;&gt;numirias/semshi&lt;/a&gt; 看起来不错。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;到此，本次博客除草就结束了！之后我还会持续关注 mspyls 的，如果补全效果有好转，也许我还会再写一篇文章补充的。关于其他的 Vim for Python 配置，有机会我也会介绍一下的～ 图咱就懒得上了，毕竟补全也没啥图嘛 233
其实吧，我最近的心理状况不是很好，学业上也碰到了不小的问题... 说不定下周又要切换到忧郁模式了 QAQ 嘛，我的近况就下周再更吧。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Vim 配置</title>
      <link>http://localhost:1313/posts/vim-pei-zhi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/vim-pei-zhi/</guid>
      <description>

&lt;p&gt;到现在我才发现，这个博客至今从来没有写过任何关于技术的文章欸（大概是因为我太懒+技术太烂）！我用 Vim 其实已经用了很久了，从接触 Linux 开始我就没用过 Nano 或者是其他的编辑器，因为 Vim 无以比拟的键盘与终端操作的便利性真的让人无法离开。因为大约一周之前 Archlinux 被我在安装新的 X Server 的时候搞炸了，所以趁这个机会重新整理了一下我使用 Vim 的配置和心得。在这里分享一下，也做一下记录和备份。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;正确使用-vim:25d6be75dee94486d03e164460065b8b&#34;&gt;正确使用 Vim&lt;/h2&gt;

&lt;p&gt;很多人质疑说，在 21 世纪，我们根本没有必要使用这种带模式的文本编辑器。这种说法我就不太认同。毕竟，一般人在使用类似 VSCode 的编辑器的时候，都或多或少地接触了模式编辑的概念：使用键盘的时候为 Insert 模式，使用鼠标的时候为 Normal 模式。而鼠标很多时候并不是一个很好的定位工具，因为文本的特殊性，使用键盘来定位内容比使用鼠标更为快捷和精准，并且用终端的时候，鼠标控制更是不可能的。&lt;/p&gt;

&lt;p&gt;还有的人热衷于配置 Vim 将其当作一个全能的 IDE 使用，也有人就此抨击说 Vim 永远也做不到类似大型 IDE 一般的体验。就我个人而言，Vim 的定位就不是一个 IDE，该用 IDE 的时候就用专业的产品，而 Vim 这种工具更像瑞士军刀，启动加载快捷操作方便，在修改一般文本配置文件和写一些小型的脚本语言工具的时候有着 IDE 无法比拟的优势。很多时候如果只是想写一些个人使用的小 Python 脚本或者写一个原型，再去开 IDE 就太浪费时间了。&lt;/p&gt;

&lt;p&gt;然后说到很多人纠结的 Emacs 和 Vim 之争，其实 Emacs 的定位也和 Vim 有着根本的不同。Emacs 是一个非常庞大完整的系统，有 Org-mode、多媒体支持、网络插件等等的功能，还有人在使用 Emacs 来放映电影，查看 PDF 文档，甚至泡咖啡。而 Vim 则更专职文本编辑，并没有太多除了文本编辑以外的功能，其使用用途也更单一。当然也不是说 Vim 不能用来泡咖啡（你可以写个 Python 脚本来和咖啡机通信），但是它本来就不是用来干这种事情的。所以 Emacs 和 Vim 并没有绝对的优劣，只是看各人的需求如何了。&lt;/p&gt;

&lt;h2 id=&#34;vim-的衍生分支-neovim:25d6be75dee94486d03e164460065b8b&#34;&gt;Vim 的衍生分支—— NeoVim&lt;/h2&gt;

&lt;p&gt;在现在，Vim 的开发已经分裂成了两大派别。其一是原始的 Vim 项目，现在处于 8.0 版本。另外还有 NeoVim，是一位开发者对 Vim 陈旧的开发思想感到不满而全新 Fork 出的分支。可以说，NeoVim 对 Vim 的进步起到了极大的推动作用，无论是 Async 操作还是 Timer 等特性，都是 NeoVim 首先实现，然后 Vim 主线再跟进的。此外，NeoVim 对除 VimL 外的外部开发语言的良好支持，对 Terminal 的内嵌，和对外部程序开放的嵌入接口，都给 NeoVim 的扩展带来了无限的可能。&lt;/p&gt;

&lt;p&gt;在 NeoVim 的基础上，套壳 GUI 开始蓬勃发展，很多 GUI 有着非常惊艳的效果，比如基于 Electron 的 Oni 和基于 Go 的 gonvim。它们都大幅改进了 NeoVim 的界面，给 Vim 增加了许多“现代化”的元素，打造“21 世纪的模式编辑器”。
&lt;img src=&#34;http://localhost:1313/images/oni.png&#34; alt=&#34;Oni&#34; /&gt;
&lt;img src=&#34;http://localhost:1313/images/gonvim.png&#34; alt=&#34;gonvim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;因为时间关系，我还没来得及试用这两款 Frontend， 所以下文的配置是针对传统的 GUI 方案——NeoVim-Qt 撰写的，并没有用到什么全新的黑科技。如果有时间，我一定会试用一下这些全新的工具的。&lt;/p&gt;

&lt;h2 id=&#34;我的-vim-配置:25d6be75dee94486d03e164460065b8b&#34;&gt;我的 Vim 配置&lt;/h2&gt;

&lt;h3 id=&#34;在配置之前:25d6be75dee94486d03e164460065b8b&#34;&gt;在配置之前&lt;/h3&gt;

&lt;p&gt;很多人在刚刚上手使用 Vim 的时候就很喜欢上网去找各种 Vim 发行版（比如 &lt;a href=&#34;https://github.com/SpaceVim/SpaceVim&#34;&gt;SpaceVim&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/LER0ever/EverVim&#34;&gt;EverVim&lt;/a&gt;）直接使用，或者看到一篇教程之后安装一大堆 Plugin。这种使用方法是错误的，因为在完全熟悉 Vim 本来的操作之前就用各种附加工具，就相当于还不会走路的时候学跑步，学出来的样子肯定是非常奇怪的。如果过早就陷入了玩配置的过程中，就无法习得 Vim 的正确高效使用方法，因此很多人有着几千行的 .vimrc，还只会不停按着 jkhl 来导航。为了避免这种情况，请先练习 Vim 自带的教程，打开方式是 :Tutor 。&lt;/p&gt;

&lt;p&gt;当你熟悉各种 Vim 的基本操作之后，可以看别人的 Vim 配置教程。在下文中，我不会给出我自己的整个配置文件，而是会分门别类地介绍我正在使用的设置和插件。确保你完全懂得自己写下的配置文件的意义，你才能拥有真正属于自己的 Vim 配置，并且能避免各种奇奇怪怪的问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: 下文所写的配置只保证能在 NeoVim 中正常使用，其中一些插件确认使用了 NeoVim 独有的特性，并且请确保你已经安装了 Python3 插件以支持 Neovim 的 Python 特性。NeoVim 的配置文件 &lt;strong&gt;不是 .vimrc，是 .config/neovim/init.vim，或者是针对 GUI 的 .config/neovim/ginit.vim！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;插件管理:25d6be75dee94486d03e164460065b8b&#34;&gt;插件管理&lt;/h3&gt;

&lt;p&gt;配置 Vim 的时候，或多或少会使用到一些插件，而一个好的插件管理器能避免大量的麻烦，并把插件关系整理得井井有条。很多人应该都听说过 Vundle、vim-plug 这类的管理器，而在现在我更推荐 dein.vim。其作者 &lt;a href=&#34;https://github.com/Shougo&#34;&gt;Shougo&lt;/a&gt; 曾经在 &lt;a href=&#34;https://github.com/Shougo/dein.vim/issues/135&#34;&gt;issue 135&lt;/a&gt; 比较过 dein.vim 与 vim-plug 的区别。&lt;/p&gt;

&lt;p&gt;简单地来说就是：
- 比 vim-plug 更快
- 支持更多的 lazy 加载特性
- 支持缓存
- 支持插件合并
- 可加载本地插件
- 支持除了 git 之外的其他版本控制系统
- 支持通知功能
- 没有命令支持
- 没有安装进度 buffer&lt;/p&gt;

&lt;p&gt;dein.vim 可以配置成在启动 vim 的时候安装不存在的插件，而且安装的速度也很快，配置文件管理起来也很优雅。当然，vim-plug 也是很好的选择，如果个人比较喜欢的话可以选用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;dein.vim: &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;Github 地址&lt;/a&gt;
vim-plug: &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;外观:25d6be75dee94486d03e164460065b8b&#34;&gt;外观&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/vim-one-md.png&#34; alt=&#34;one&#34; /&gt;
对于每天都使用的编辑器，使用一个适合的主题很重要。我个人比较喜欢 [one](&amp;quot;&lt;a href=&#34;https://github.com/rakr/vim-one&amp;quot;&#34;&gt;https://github.com/rakr/vim-one&amp;quot;&lt;/a&gt;) 的白色主题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;ColorScheme one
set background=dark
set background=light
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后改造 Vim 的状态栏，为其添加一条色彩鲜艳的 Powerline。（Powerline 的 Vim 版已经失去支持，现在仍在活跃开发的有 &lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;lightline&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34;&gt;airline&lt;/a&gt;。相对来说，lightline 更加轻量，而 airline 开箱即用，和其他很多插件都有自带整合。airline 还可以安装 &lt;a href=&#34;https://github.com/vim-airline/vim-airline-themes&#34;&gt;airline-themes&lt;/a&gt; 获取各类主题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;let g:airline_theme=&#39;one&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的字体打过补丁，还可以开启 powerline font 特性进一步美化显示。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;let g:airline_powerline_fonts=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为有了 airline，默认的状态显示就可以关掉了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;set noshowmode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除此之外，还有一些其他的小设置，可以根据个人喜好配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;&amp;quot; 显示行号
set number
&amp;quot; 高亮当前行
set cursorline
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;未完待续...&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>untitled</title>
      <link>http://localhost:1313/posts/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/untitled/</guid>
      <description>&lt;p&gt;摘自实验考前留宿当晚的聊天记录&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;我很希望被人接纳认可 更讨厌的是我一直假定自己做的一切都应该被质疑 我一直不认可自己 又想找人来推翻这样的一个假定 没有一个人支撑着我的精神的时候 我本来把注意力都转移在学习上 昨天劳技课 别人说话不想回 上课什么都不想听 也不喜欢别人和我说话 也不喜欢别人和我谈心 也不喜欢 没关系的 如果是我倾诉的时候 我还是愿意说愿意听的 你觉得 封闭真实的自己 是一种成熟吗 可我一直很不习惯这样 我会感觉很孤独 这几天心情又有点不太好 但是这个问题的确困扰我挺久。。 如果只是和一般的朋友维持表面的欢乐 这种封闭自我还是可以的 但是有些时候人会觉得非常的孤独 这种孤独不是能靠白天的那个自己来排解的 找不到能倾诉的人 或者对自己的认同 我会很痛苦 只要有这样一个朋友 无论什么时候都会很安心 因为知道对方肯定将会回应自己的 而且不会抛弃自己 很有安全感 反正我感觉一时半会儿是找不到这样的人的 反正我是真的单纯 可是 当我知道什么是不单纯的时候 我真的绝望 感觉自己永远都做不到 我跨出了这一步 注定要往不单纯走 但没有一个人支撑着我的精神的时候 我感觉我迟早是会崩溃的 本来就在崩溃的边缘 可我真的不愿意去精卫 也许没关系 说不定崩溃也挺好的 等哪天有了自杀的勇气 也免得受罪 这个问题不大 前两天清华一个人从 26 楼跳楼 非常保险 下落时间 4 秒 好像有点长 楼层低点应该比较好 6 楼是 1.9 秒 4 楼 1.5 差不多 那还是 6 楼保险 我们学校一教楼顶楼 6 楼 花坛 护栏比较低 似乎不错 寝室楼有 7 层 我看过了 窗户上的止锁可以用十字螺丝拆掉 我最近失去了最后一个 failsafe 崩溃应该只是时间问题 到最后还是只能拖延时间 或者应该乘最近不明不白的时候早日自杀 免得到后来纠结受罪 不行 不敢 好像没值回人生的票价钱 虽然也没人给我记账 有的 但是麻烦就在这里 我想见的人 正好是阻止我崩溃的最后一个保险 可其实并没有什么想买的东西 我买无印是因为可以把商标撕得一干二净 没有任何特征 真的服了我自己了 太烦人了 真矫情 啥事都不想做却折腾来折腾去不知道在干嘛 倒没有烦躁 只有绝望 也没有谁敢去倾诉 倾诉了也没啥用处 把自己的精神完全依靠在一个人身上是我干过最蠢的事情 我曾经试图学着博爱 这是我们月考语文阅读文章 看得我哭了半个小时 但也许我很快就要失去这样的能力了 转移注意力如果成功了的话 我的学习也不会爆炸了 我本来想把注意力都转移在学习上 然后失败了 反正我上课常年备餐巾纸 鬼知道什么时候会开始哭 看个语文文章能哭半个晚自修 写个作文能哭半个多小时 不过想想 哪天不会哭了 也就凉了 所以还挺好 要是能的话我的地理也不会爆炸了 数学离不及格 3 分 这次语文作文差点未完卷 说了也不明白啊 我妈：现在的年轻人 事不够多 事情多了就没时间想了 但是我现在不能完全相信别人了 关系比较好的同学我也欲言又止 只能拖拖时间 稍微整理一下思路 如果加上学业的话 我真的撑不下去 也不是压力 最讨厌的事情就是我感觉不到压力 我根本感觉不到上学的实感 上课随便涂涂 笔记也不想写 作业乱做 错了不想批改 太棒了 不久之后就能自残了 搞不好可以去尝碳酸锂味儿了 我今天试着用 9v 电池串一下 18v 电舌头 感觉挺好玩 功率也挺大的 不敢再串了 超过 24v 就真的危险了 我真的 不知道怎么办了 精神也超级丧 211 可能能考 考个石河子 就怕被新疆暴恐分子打死 可以去天山看看泥石流 看看地理卷子说的对不对 我 有时候真的就什么都不想做 我感觉 自己丧的时长越来越长了 平时我也不喜欢别人和我说话说到心里 也不喜欢别人安慰我 我也挺喜欢一个人走的 我好害怕 我也不想休学 我不敢死 我承受不了那么孤独 我不想吃碳酸锂 我想要有生活的感觉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>《思想录》材料随笔</title>
      <link>http://localhost:1313/posts/si-xiang-lu-cai-liao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/si-xiang-lu-cai-liao/</guid>
      <description>&lt;p&gt;帕斯卡认为，人是一根能思想的苇草。从物质上说，人可悲地与苇草没有本质区别，都是那么的脆弱。但是人有思想，能感知到这种可悲与自身的局限，这是人有别于它物的伟大之处。人是卑贱与伟大的混合体，要脱离自己可悲的限制，正是思想引领人回到心灵的天堂。&lt;/p&gt;

&lt;p&gt;帕斯卡是一名全才，他用自己的一生贯彻着自己“思想”的信条。面对自然，他用思想的力量解构现象，认知规律与本质。面对天地，他用思想的能力给出自己信仰的解答。这是一根苇草的反抗，是一段向上天展现的表演与证明。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;诚然，一个社会性的人缺少不了集体意识、秩序与约定俗成，对人来说必不可少。但是，若是失去了个体的思想，人便不再为人。宏大叙事与“主流价值观”横行的背后，是千万欠缺自我思想的牺牲者。学会思考，运用自己的思辨力，方可解放心灵，成为一个真正的个体。不允许他人与群体主宰自己，这是人最后的疆界。&lt;/p&gt;

&lt;p&gt;在思想的面前，理性与信仰是统一的。信仰是理性的信仰，理性是信仰的理性。无论是对信仰的追求，还是在对理性的践行中，人都补充着思想，以期心灵的救赎。&lt;/p&gt;

&lt;p&gt;只有当人觉醒了自我意识，“人”才成为了“人”。有了独立意识的保护，人不会被集体意识完全束缚。在理性认知的引领下，人能确切认知万事万物，给出自己合理的解答。人终究不会脱离物质与世俗，欲望、享受与拼搏排解着人的孤独与寂寞。而为了弥补堕落之业，人又全力寻求着思想的慰藉和补全。在兽与神间，每个人用自己的毕生试探其平衡。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>不迷茫</title>
      <link>http://localhost:1313/posts/bu-mi-mang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/bu-mi-mang/</guid>
      <description>&lt;p&gt;五月的天气就如婴儿的面孔，一场雨后跟着的又是带来暑热的艳阳。高压与低压的交替，仿佛也让我的心情有着不寻常的变动。
做了一个梦。在梦里，我回到了小学，在操场上与同学们嬉戏。无意中，我望向水塘，本应看到的是我的面孔，但水塘中倒映着的确是另一个人。一转眼，升入了初中。赶忙确认自己的面貌，镜子中的人果真有着另一个同学的特征。时间仿佛回到了高中，镜子中的我是他、是他、是她、是她，可就不是我。
&lt;!-- more --&gt;
猛然从梦中惊醒，精神仍处于恍惚之中。我害怕。我似乎从来就没有见到过我自己的面孔，一直都跟随在别人的背后。想着要成为那个人，于是从没有形成自己的思想和意志。面对文章和时事问题，我时常能说出“这其中有这样几种看法和观点”，但很难说出“我认为是这样的”。
我对很多事情似乎一直都缺少一种主见。或者说，我的思维习惯于跟从一些已有的，被我见到的东西。我会有批判性思维，但是仅限于我看到的，并且判断的价值观也来自于他人。这与其说是批判性思维，不如说是“读者对作者思想的一种本能怀疑与抵制”，或者是“众人皆醉我独醒”的一种刻意展现。
若是一直跟随着别人，模仿着别人的生活方式和意义的话，我的自我又存在于哪里呢？所以，我失去了前行的方向，突然意识到自己的生活没什么意义。船只在海洋中航行，不依靠自己的罗盘和地图，只是跟随着附近的船影飘荡，怎么能找到那片陆地呢？
正是因为隐隐约约意识到了这点，一年前的我受到了莫大的冲击。但是那次冲击并没有给我带来什么教训，却造成了自信心的完全丧失。我开始不相信自己，怀疑一切，质疑一切，进入了走火入魔的怪圈。
自己都不相信自己，又凭什么要求别人相信自己呢！如果一直都在质疑，即使别人指出了正确的方向，我也一直在怀疑，怀疑，这样的怀疑又有什么价值！的确，很多事情上我曾经都想错了，但是这并不是完全否定掉自我的理由。本来就少的可怜的自我又被自己亲手摧毁，我也蠢的够可以的。
我不相信我自己，想否定自己，但同时这样的我又感到痛苦，想要得到别人，得到自己的认同。这样，我向别人求助，向别人倾诉，渴望得到他人的肯定，以此重建对自己的认同。但是，如果我仍然想要否定自己的一切，当得到别人的肯定的时候，我定会否认掉“得到肯定”这个事实。所以我会说“我弱就是我弱，你强就不要假惺惺地说自己弱了”，如此这般，又想要让别人否定我自己。这样的我，真的很矛盾啊。
我所需要的，正是如“我能无条件相信我做的事情是对的”一般的精神。虽然说，我大概不能相信自己所做的一切的正确性，但是，至少不应该一味地否定自己。
在心里，我也许还是一个孩子。想要依赖别人，遇到问题就退缩，投入别人的怀抱。当有一天，我发现父母再也不能解决我的困扰，我嚎啕大哭，我绝望，我迷茫。我尝试着找到另一个能依靠的人，再依赖别人来解决我自己的困扰。怎么可能有这样的好事啊！这种迷茫，应该更像是婴儿正在断奶，正因为喝不到母乳而大哭大闹。也许，我应该学会独立地思考，独立地解决问题，不依赖任何人而生活了。
伊能静说，真正能生活得很好的人，和别人在一起生活和与自己在一起生活过得是一样的。个人其实都是独立的。每个人，也只有每个人自己，才对自己直接负责。要依赖别的东西生活的人，都是失去动力的独木舟。当失去了外在的帮助，就只能在荒芜中沉浮。只是有时候，要放下这种依赖的心思，要花上很大的力气。
五月的艳阳提醒着我，还有一年，我将踏上高考的考场，踏上走向大学学府的全新旅程。还好，还有一年。我不敢说我完全解除了心头的疑惑，但我至少看清楚了一部分问题的本质。现在的我暂时不会迷茫了。我也许仍然会矫情，也许还会绝望，但是我看到了准静止锋中的一丝光芒。随着时间的推移，暖锋将会占据上风，将徘徊的云气推向遥远的北方。
&amp;gt; 「悔恨是一种事后的聪明。在悔恨者眼里，往事是一目了然的。他已经忘记了当初选择时错综复杂的困境和另一种可能的选择的恶果。此时此刻，已实现的这种选择的恶果使他成了那种未实现的选择的狂信者。他相信，如果允许他重新选择，他将不会有丝毫犹豫。」&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>世界折叠</title>
      <link>http://localhost:1313/posts/shi-jie-zhe-die/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/shi-jie-zhe-die/</guid>
      <description>&lt;p&gt;刚刚看到一篇微信号文章《北京终于折叠》，提到目前北京的整治活动将底层劳动者的生活空间压缩到最小，阶级分层固化的严重程度又上了一个台阶。在我看来，阶级分层固化不仅仅是北京乃至中国的问题，这是全球当今社会经济模式下的一种必然。面对这样的必然，我该如何生活？&lt;/p&gt;

&lt;p&gt;说到底，这些社会问题到最后还是归咎于人口与资源的不平衡。人多资源少，人还总是有新的欲望，资源的开发跟不上人的欲望。那怎么办？只能牺牲一些人的利益了。谁牺牲，谁不牺牲，这得资源分配者说的算。作为国家层面上说，这样的分配者就是政府。制定规则的人首先会是最大得利者。你说一个官员或者是高层人士，制定出会导致自己既得利益损失的分配方案，可能吗？所以首先得是第一空间的人，也就是掌权者及其附庸，享受最好的资源。接下来入住第二空间的人，那得是对社会和经济发展最有贡献的一批人，在中国这样的一批人是中产阶级，大概也就是我们所说的“白领”。他们能享受到一般人能享受到的最好生活条件。至于剩下的一些第一第二产业和底层劳动者，那就只能去第三空间了。
&lt;!-- more --&gt;
人人生而平等，但是人人生来在社会上已经划出了三六九等。这样的事实看似很残酷，很多别有用心的人也以此攻击特定国家的政府。然而，我想这样的问题不仅仅是一个国家所特有的，这是存在于这个世界上的人类国家共有的巨大隐患。当然，如今有不少人发现了这样的问题，并且尝试着手解决。政府尝试优化资源分配，即使分配的现状没有改变，至少得让这些底层劳动者感觉自己得到了应有的可接受的权益吧？这点其实古代日本政府做的很好，其“各安其分”的阶级制度似乎能让各个阶层的人都感到满意。而对于一些社会良知，他们也想通过自己的行动，比如建立 NGO 或者资助资产来帮助底层劳动者。但是这样的帮助和《捕蛇者说》无异。这些人自己生活在第二空间，大多数是不肯放弃自己的利益的，也不可能改变整个资源分配体系，最多只能拉一些第三空间的人前往第二空间，根本不可能解决根源上的问题。&lt;/p&gt;

&lt;p&gt;而就我来说，我可能只能从“精致的利己主义者”角度出发了。既然我不能改变这个现状，那我只能尽可能利用这个现状来谋求自己的未来。出身于第二空间，活在第二空间，我的目标就是维持在第二空间的地位，并尽可能前往第二空间的上层。虽然说第三空间的人前往第二空间非常困难，但第二空间的人落到第三空间却是有可能的。而同样是活在第二空间，也有活的好和活的不好的区别。所以第二空间的生活常态就是——中产阶级唯恐自己落下当前的阶层，拼命地往前挤。作为这个空间的一员，自然也不能免俗。对高中生来说，最近的一次阶级微调就是在一年半后的高考。所以说，现在的学习状况，在某种角度上会决定未来一生的地位和走向。比别人提早意识到这个问题，就会是先行者的优势。当同学还在为游戏和男女友而战时，我得明白我是在为了将来而奋斗。&lt;/p&gt;

&lt;p&gt;话说成这样可能一点都不正确，但是既然已经站在这个平台上，就要充分利用这个平台的高度往上爬。这样注定会抛弃处于自己身下的人，置底层劳动者与往日的同行者于不顾，并夺走他们本来可能拥有的资源。但是，我本身就是这个巨大不平等制度的一部分，要让我自己过得更好，就必须这么做。多少人用不知道比我高到哪里去的文笔修饰自己的目的，但是他们真正所想的大概也不过如此。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从中文编程说起</title>
      <link>http://localhost:1313/posts/cong-zhong-wen-bian-cheng-kai-shi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/cong-zhong-wen-bian-cheng-kai-shi/</guid>
      <description>

&lt;h2 id=&#34;原委:e052a7a6beb19ffcd39c65f16072d725&#34;&gt;原委&lt;/h2&gt;

&lt;p&gt;最近在 Github 的 C# Repo 上看到了一个很搞笑的 &lt;a href=&#34;https://github.com/dotnet/csharplang/issues/993&#34;&gt;issue&lt;/a&gt;，因为内容太长了，恕无法贴出全文 233 大体上是在建议微软为 C#、F#、VB.net 提供一个中文变体，然后关于中文编程的必要性和实现进行辩论。在中国编程圈子里这也算是个老生常谈的话题了，也时常有人在研究实现实验性的编程语言。虽然我对于中文程序语言的必要性不置可否，但是这个 issue 暴露出了一些长久存在于国人身上的问题，我想对此谈谈自己的看法。&lt;/p&gt;

&lt;h2 id=&#34;只空想不动手:e052a7a6beb19ffcd39c65f16072d725&#34;&gt;只空想不动手&lt;/h2&gt;

&lt;p&gt;在这个 issue 下面有一些好心人在给这名用户一些解释说明：
&amp;gt; qrli: Company has to earn money to keep going. If you pay a big bill, someone will do it for you. You cannot ask someone to do you a favor for free.
And, computer language is not natural language. E.g. Your math symbols are not Chinese, your numbers are not Chinese, but you have no problem with them, right?
We generally view it as non-sense. If you really want it, you can create an editor plugin to translate keywords to Chinese and display them.&lt;/p&gt;

&lt;p&gt;同时还有日本友人的留言:
&amp;gt; ufcpp: 中国だけでなく、日本でも同様の問題があります。多くのプログラミング言語が英語をベースにしていて、日本語話者にとってプログラミングの難しさの一因になっています。
当然、日本でも「日本語プログラミング言語」が欲しいという声はあります。実際になでしこというプログラミング言語があります。しかし、日本語プログラミング言語を作れるのはやっぱり日本語話者だけでしょう。中国語ネイティブなC#が欲しければ、それは中国語話者が作るべきで、他力本願でマイクロソフトに頼むものではないと思います。
ちなみに、日本語プログラミング言語は、存在こそあるものの、実際のところあまり流行はしていません。&lt;/p&gt;

&lt;p&gt;也有一些建设性的回复：
&amp;gt; nobodxbodon: I agree that it&#39;s up to Chinese speakers to develop programming languages in Chinese. I heard about なでしこ before, and seems it&#39;s very useful for certain user group and certain tasks. I&#39;m also trying to develop a simple script language, hopefully using Chinese grammar/tokens, to solve simple tasks, as a baby step towards Chinese PL.&lt;/p&gt;

&lt;p&gt;这是 issue 提交者的回复：
&amp;gt;@qrli
你是中国人吗? 怎么对中文编程的话题这么熟悉?看起来你没明白我表达的重点.你是在抵制中文编程吧.
实现母语编程怎么可能没有意义? C#用的字符已经非常接近英语自然语言,也就是越来越母语化,如果这个星球上的人都能用他们自己的母语编程,软件生态将空前的强大和发展.
你完全不知道量变带来的质变是怎样的,就急着否定它?
我设想的是在编程语言的基础上实现本地化和母语化, 不是用插件实现.
你不过是站在你自己的角度考虑罢了,你没站在微软这种大企业的角度和市场的角度考虑.你不知道生态发达会是怎样一番景象,并且,你想要阻止对编程感兴趣和热心的人.
并且,阿拉伯数字和数学符号没必要中文化.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@ufcpp 朋友你好,
我表达的意思是,本地化和母语化,就像一款国际化的软件会提供多种版本一样,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里就不摘取更多的评论了。看到这些讨论，我突然在想：这个人在此之后有没有任何的下一步动作呢？我去翻了一下他的 Repo 列表。&lt;/p&gt;

&lt;p&gt;有。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/qwas982_repo.png&#34; alt=&#34;qwas982 repo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果这也算有的话。&lt;/p&gt;

&lt;p&gt;所以从头到尾，这个人一直都在谈他的构想，然后想说服所有人来帮他做，没有给出任何有建设性的意见。在 Github，大家本来都用代码说话，别人没有义务来为你无偿实现代码。即使不是在 Github，要实现一项产品也不是在论坛上发一段话就可以实现的，得自己付出力量去找合作，找资本，然后自己把整个公司/社区运行起来，给出有说服力的产品，大家才有可能来尝试你的东西。别人没有义务来为你实现代码，也没有义务来使用你的产品。&lt;/p&gt;

&lt;p&gt;其实，类似这样的思想是中国科研圈，特别是计算机领域的一个通病。从理论高度来谈一个项目的必要性谁都会做，但是要实现一个高质量的成品需要有真学识的人长期的付出投入。问题在于，现在空想家太多而实干者太少，这样的结果就是量产出一个个外强中干的空有名号的空壳产品。从 China OS 到 &lt;del&gt;国产&lt;/del&gt;印字 CPU，到现在火热的 AI，提着大名号的项目不计其数，国家为它们投入无数的资源，而这些投入换来的却是一个个套壳成品与开源项目抄袭丑闻。现在人人都在做中国梦，但沉溺在梦中不想苏醒，只会吹起一个个精美绝伦的泡沫，而在其破碎的瞬间在痛苦中醒来。当梦的泡沫遮蔽了真正实干者的光芒，当劣币驱逐良币，中国的科研就不可能真正全面走入世界一流之列，这也是最可悲的未来。&lt;/p&gt;

&lt;h2 id=&#34;规范与妥协:e052a7a6beb19ffcd39c65f16072d725&#34;&gt;规范与妥协&lt;/h2&gt;

&lt;p&gt;根据 Github 的 Guideline：
&amp;gt; Issues are a great way to &lt;strong&gt;keep track of tasks, enhancements, and bugs&lt;/strong&gt; for your projects. They’re kind of like email—except they can be shared and discussed with the rest of your team. Most software projects have a &lt;strong&gt;bug tracker&lt;/strong&gt; of some kind. GitHub’s tracker is called Issues, and has its own section in every repository.&lt;/p&gt;

&lt;p&gt;同时，issue 相关联的 repo(csharplang) 自己的规范：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Discussion should be relevant to C# language design. Issues that are not will be summarily closed.

&lt;ul&gt;
&lt;li&gt;Choose a descriptive title for the issue, that clearly communicates the scope of discussion.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Design Process
In many cases it will be necessary to &lt;strong&gt;implement and share a prototype of a feature in order to land on the right design, and ultimately decide whether to adopt the feature&lt;/strong&gt;. Prototypes help discover both implementation and usability issues of a feature. A prototype should be implemented in a fork of the Roslyn repo and meet the following bar:
Parsing (if applicable) should be resilient to experimentation: typing should not cause crashes.
&lt;strong&gt;Include minimal tests demonstrating the feature at work end-to-end&lt;/strong&gt;.
Include minimal IDE support (keyword coloring, formatting, completion)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很明显，这个 issue 根本就和现有项目的进度、bug，或者是&amp;quot;enhancements&amp;quot;没有任何关联。即使看作是语言设计的讨论，也没有给出任何的 Prototype，还有长达 3 个屏幕才能读完的汉字内容，完全就不符合约定俗成的交流规范。&lt;/p&gt;

&lt;p&gt;还有很多国人在一些明显写着要求使用英文讨论相关问题的国外论坛使用中文，然后以“中国人就要说中文”为理由拒绝执行规范。这就像小孩撒泼一样无赖，同时其结果也会像大多数人面对小孩撒泼的结果——不理睬——一样。&lt;/p&gt;

&lt;p&gt;当你要求别人为你妥协的时候，你也要学会向他人妥协。言论自由不是为你违反规范后的辩解特制的挡箭牌，也不会禁止别人在你拒绝妥协后将你的 issue close 或者把你 ban 掉。&lt;/p&gt;

&lt;h2 id=&#34;自尊背后的自卑:e052a7a6beb19ffcd39c65f16072d725&#34;&gt;自尊背后的自卑&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;现在,人们看不到编程的前景,并且,因为进入这个领域的大多是&lt;strong&gt;精英学者&lt;/strong&gt;,他们已经思维固化,认为实现中文编程汉语编程没有意义,他们已经&lt;strong&gt;唯英语编程马首是瞻&lt;/strong&gt;,对英文编程依耐性很高,认为编程已经没有别的路可走,没有别的可能性了,因此他们不想研究中文编程汉语编程,更不会来实现,因为他们已经&lt;strong&gt;被严重西化&lt;/strong&gt;,他们下一步要做的就是抛弃他们的母语,和承载于母语上的文化.你问他们国学是什么,他们不会知道,就算知道这个名字,他们也说不出什么是国学.对国学涵盖的广泛文化内涵一概不知.为什么,因为国学也是一种思想,而他们学的思想是西方人的文化.是西方人的&lt;strong&gt;西学&lt;/strong&gt;.并且,因为&lt;strong&gt;西方人已经建立了庞大的程序世界&lt;/strong&gt;,各种条件齐全,他们拿来就用,所以他们懒得再重新建立新的程序世界,是的,这样看起来没什么不好,但是,根据物质守恒定律,得到了什么,就得付出相应的代价,就得失去什么,天下没有免费的午餐,天上不会掉馅饼.其代价就是我前面说的.&lt;strong&gt;迷失自我,不知自己是哪国人,不知道自己是什么种族,渐渐地无法理解生养自己的文化&lt;/strong&gt;.那么,&lt;strong&gt;我们醒悟后的人&lt;/strong&gt;,应该跟着他们的屁股走吗?与他们一起堕落被同化吗?&lt;strong&gt;不&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很激烈的，充满感情的陈辞，我似乎能看见这名作者在电脑后打字时颤抖的双手。在面对“外文编程”这个“侵入”中华传统文化的造物的时候，其内心的“国人自尊”产生了非常强的反抗。有人曾经说过，如果太过于强调自尊其实是自卑的另一种表现。就像简爱一样，因为有屈辱的过往，国人的内心其实处在非常消极自卑的状态，而体现在了过度自尊上。同时，强调所谓“精英学者”，看似是对部分“不顾百姓的上层人士”的批驳，其实是对自己无力改变事物的消极抵抗。因为自己无法改变编程社区现状，就将他人扣上帽子进行批驳，然后把自己拉到“人民”的一边来壮大自己的道德力量。&lt;/p&gt;

&lt;p&gt;要让别人看得起你，你自己首先得看得起你自己。这样看来，中国人的心理基础离大国还差得远。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@rgwan
我在这里发这个倡议讨论的是 中文版 C# 之实现的可行性,顺便讨论下中文编程的的意义,你却要我去证明你讲的那一套,&lt;strong&gt;你是在命令我吗?你不知道什么叫讨论,探讨,探索是吗?&lt;/strong&gt;
你认为不好,不高效,也不省事,那就随你呀,这是你的自由,只不过&lt;strong&gt;不要来强加给我就行&lt;/strong&gt;,
我也没有强加给别人什么,如果是要一个劲地非要硬是把我的原意解读为,我是在要求别的开发团队来实现我的意志,那请便.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;。。或许大部分的高素质中国人都没有自卑问题吧。。这也许就是个个例&lt;/p&gt;

&lt;h2 id=&#34;敌我意识:e052a7a6beb19ffcd39c65f16072d725&#34;&gt;敌我意识&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;既然贴出了我回复你们对我的&amp;quot;谩骂,嘲讽和羞辱&amp;quot;,那咋不把你们自己 &lt;strong&gt;羞辱谩骂嘲讽他人&lt;/strong&gt;的评论也贴出来呢 ?果然是 &lt;strong&gt;小人行径&lt;/strong&gt; .
我需要澄清一下,这几个账号 pigfromChina bctnry(当然,还有一些) &lt;strong&gt;是在这里反对我的观点并进行人身攻击最多的&lt;/strong&gt; .我初始的时候,并没有在意他们的攻击,但是这反而 &lt;strong&gt;让他们得寸进尺&lt;/strong&gt;. 我觉得有必要说明下他们的 &lt;strong&gt;丑恶&lt;/strong&gt; 行径.
pigfromChina 他只是贴出了我回复他们对我的&amp;quot;谩骂,嘲讽和羞辱&amp;quot;,但并没有把他们自己,羞辱谩骂嘲讽他人的评论也贴出来呢?他们的行为如何,我无须多言.
目前,这里有;
反对中文编程,
中立,
支持中文编程,
野蛮土匪,
&lt;strong&gt;这几大类人在这个 iss 里&lt;/strong&gt;.不知&lt;strong&gt;你是哪类&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好的，我们仿佛又回到了那个时代，人与人之间又要开始划左划右，争个你死我活，贴大字报批斗示众。
无论是在微博还是在任何中文社交平台上，我们对各种“党争”已经见怪不怪了。这样的习惯看来从 萌&lt;del&gt;wen&lt;/del&gt;化 Revolution 给国人的心中种下二分敌我观的种子之后一直继承到了今天。简单地把所有人划为几类，大大方便了逻辑判断，也利于合法化自己对他人的攻击，如果别人反驳就可以用自己的道德大旗来抵挡，真的是非常方便的自欺欺人的手段。二分化的简单思路，扣帽子的习惯，阻止别人来和你站到一条线上（因为别人害怕被你的“大义”捆绑），也阻止有道德有思想的人和你交流（生怕被你攻击，也懒得理你）。当互联网环境充斥着这类人时，其结果就是充斥着不择手段的攻击与诋毁，不停挑战人性的下限（就和几十年前一个结果）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;duangsuse: 不要给自己臆造幻想中的敌人, 认为别人粗鲁的人首先应该审视自己.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>关于博客</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作为新写博客的惯例，写点自我介绍和动机性质的东西&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以前曾经写过一个博客，没坚持下去。我发现写博客是一件很考验人意志力的东西，之前我通常把时间都浪费在选博客平台，选主题，搞SEO上，到最后却发现这些东西没有任何用处。感觉很多放在搭博客改博客上的时间其实都是白白浪费掉的。明明只是一个工具，却占用了我那么多时间，真的是本末倒置。现在仔细想想，想看博客的人自然会看，没人看的话，做一场记录自己的自娱自乐活动也挺好。&lt;del&gt;所以不折腾了，装了个Ghost（这垃圾Ghost还真是难装，本来以为挺容易的，结果因为nodejs版本折腾了一个小时），默认主题，设置不改，直接写吧。&lt;/del&gt; 好了，事实证明我还是太年轻了，Ghost一堆坑，现在改用hexo，换了个Next主题，默认设置，文件放在dropbox自动同步，还免了备份文章。。
至于这篇博客的内容，之前博客里的内容自然会转过来，之后的内容会随着我自己的性子写。其实我感觉这个网站并不适合做成公开的形式，如果是一个私人的日记那倒是正好。估计再过个几年，这个网站就会成为我的黑历史。还好搭载博客并不是这台服务器的唯一目的，放出来也不会亏什么。
因为最近一些特别的经历，我越来越意识到，人是需要一个地方来发发牢骚，说说自己内心的想法的。很多时候，自己身边认识的人反而并不是最好的倾诉对象，当面与人说的时候自己的措辞也会出现一些偏差，但如果改成书面的形式就不太会出现一些误解或者不爽的情况。并且，即使没有人看，有些话只要说出来就会感觉好很多，所以有没有访客，访客是谁其实并没有什么太大的关系。
当然除了一个青少年的无谓牢骚之外，这个博客里还有一定概率会写一些我正在学习的编程类笔记或者一些小作品。希望读者不要对这些小玩具有任何无谓的希望，它们的质量大概会和&lt;a href=&#34;https://coolapk.com&#34;&gt;全球最大的计算器市场&lt;/a&gt;里APP的质量比较相近。如果在电子琴方面开了什么op新坑我可能也会稍微扯一扯吐槽一下网上扒谱的质量。&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>