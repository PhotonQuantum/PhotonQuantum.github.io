<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术杂谈 on 光子の胡话</title>
    <link>http://localhost:1313/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/</link>
    <description>Recent content in 技术杂谈 on 光子の胡话</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://localhost:1313/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Vim 下使用 Microsoft Python Language Server 补全</title>
      <link>http://localhost:1313/posts/microsoft-pyls-in-vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/microsoft-pyls-in-vim/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;自从上次咕咕咕之后，博客又长草了三个月（逃。当然，我也没想到咕咕咕之后写的第一篇文章竟然是一篇技术文。等等，我最初开这个博客的目的就是写点杂七杂八的技术吧？那我写一些技术类的东西也不会显得奇怪吧？呐？不会吧？（一个作着文青梦的理工生突然醒悟）啊，意识流的内容我也没想断更，具体以后会写什么东西还是随缘 233&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;初衷:73fe333ef1410e42088669a13cfeffa5&#34;&gt;初衷&lt;/h2&gt;

&lt;p&gt;首先我是个 Vim 教徒，在 Vim 下写 Python 也写了一年多了。自然，Python 补全肯定是一直在用的。我之前用的一直是基于 Jedi 的补全方案，效果也不错，就是补全出现速度稍微有一点～点慢。不过由于用了异步的补全框架 &lt;a href=&#34;https://github.com/ncm2/ncm2&#34;&gt;ncm2/ncm2&lt;/a&gt;，所以觉得海星（这里先提一个醒，我之前一直在用的 &lt;a href=&#34;https://github.com/Shougo/deoplete.nvim&#34;&gt;Shougo/deoplete&lt;/a&gt; 有坑，用起来觉得超级卡，还甩锅 Jedi，等换了 ncm2 之后丝般顺滑...）。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;最近发现微软造了个新轮子，把 VS Studio 里的 Python 语义补全拿出来了，听说效果很不错，而且已经有 Emacs 社区的大神成功将其引入 Emacs（中文：&lt;a href=&#34;https://emacs-china.org/t/microsoft-python-language-server/7665&#34;&gt;Emacs China&lt;/a&gt; 英语：&lt;a href=&#34;https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/&#34;&gt;vxlabs&lt;/a&gt;）。听已经用上的人说，补全速度极快，而且由于用的是 C#，后台是多线程进行分析的，效率很高。这激起了我想在 Vim 上吃上微软 Python 补全螃蟹的欲望。&lt;/p&gt;

&lt;h2 id=&#34;lsp:73fe333ef1410e42088669a13cfeffa5&#34;&gt;LSP&lt;/h2&gt;

&lt;p&gt;既然 Microsoft Python Language Server（下称 mspyls）是微软实现的，它的通讯接口自然是微软自己提出的 Language Server Protocol（下称 lsp）。这个协议正在逐渐成为各类补全服务的通用统一协议。对于 lsp 的详细介绍，可以从&lt;a href=&#34;https://langserver.org/&#34;&gt;这个&lt;/a&gt;地方了解。简单地来说，它可以让语言分析实现和前台的 IDE 或者文本编辑器分离，让文本编辑部分和语言补全分析部分解耦，从而可以任意搭配。也就是说，如果我想在 Vim 上补全 Python，我既可以用 mspyls，也可以用 jedi。反过来，如果我想用 mspyls 补全，我既可以用 Vim，也可以用 Emacs， 当然 VSCode 和 Atom 什么的都可以。正是因为这个原因，mspyls 有强大的泛用性，可以很容易地在 Vim 上跑起来。
细节上来说，LSP 基于 JSON-RPC，可以通过 stdio 通信，也可以用 tcp 通信（所以 IDE 和语言服务可以跑在不同的机器上哦～）。关于现在有哪些语言服务能用，以及有多少编辑器可用，都可以在 &lt;a href=&#34;https://langserver.org/&#34;&gt;langserver&lt;/a&gt; 上查到。&lt;/p&gt;

&lt;h2 id=&#34;编译-mspyls:73fe333ef1410e42088669a13cfeffa5&#34;&gt;编译 mspyls&lt;/h2&gt;

&lt;p&gt;由于我用着 Linux，所以下面的指令只适用 Linux，Windows 平台的话编译过程应该没差多少吧，网上应该也有不少的资料。
首先安装 .net core，Archlinux 下就可以直接 sudo pacman -S dotnet-sdk 一键解决（吹爆我大 Archlinux 神教！）
然后 git clone &lt;a href=&#34;https://github.com/Microsoft/python-language-server&#34;&gt;https://github.com/Microsoft/python-language-server&lt;/a&gt;
进入刚刚 clone 下来的 repo，到 src/LanguageServer/Impl 下，然后&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;$ dotnet build -c Release
Microsoft (R) Build Engine version 15.9.20.62826 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 51.1 ms for /home/lightquantum/ms_pyls/python-language-server/src/Analysis/Engine/Impl/Microsoft.Python.Analysis.Engine.csproj.
  Restore completed in 91.75 ms for /home/lightquantum/ms_pyls/python-language-server/src/LanguageServer/Impl/Microsoft.Python.LanguageServer.csproj.
  Microsoft.Python.Analysis.Engine -&amp;gt; /home/lightquantum/ms_pyls/python-language-server/output/bin/Release/Microsoft.Python.Analysis.Engine.dll
  Microsoft.Python.LanguageServer -&amp;gt; /home/lightquantum/ms_pyls/python-language-server/output/bin/Release/Microsoft.Python.LanguageServer.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:07.36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不出意外，就可以在 ../../../output/bin/Release 下找到 Microsoft.Python.LanguageServer.dll，用 dotnet Microsoft.Python.LanguageServer.dll 命令运行一下，没有报错（也没有回显 - -）就成功了！&lt;/p&gt;

&lt;h2 id=&#34;languageclient-neovim:73fe333ef1410e42088669a13cfeffa5&#34;&gt;LanguageClient-neovim&lt;/h2&gt;

&lt;p&gt;在 Neovim 上其实已经有很多 LSP 的客户端插件了，个人用下来最完全体的，是 &lt;a href=&#34;https://github.com/autozimu/languageclient-neovim&#34;&gt;autozimu/languageclient-neovim&lt;/a&gt;。
首先，安装插件就不细说了，vim-plug 或者 dein 都是可以的（就是 Vundle 已经停止维护了，如果还在用 Vundle 的话，还是尽快切换成前两者吧），针对选择困难症，我无脑推荐 dein。为什么？因为我用的就是 dein（233
之后，需要对插件进行一些配置，将 Python 的默认语言服务从 Jedi 实现改成 mspyls。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;记得修改&amp;lt;...&amp;gt;到你刚刚编译的目录！&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;let g:LanguageClient_serverCommands = {
    \ &#39;python&#39;: [&#39;/usr/bin/dotnet&#39;, &#39;exec&#39;, &#39;/&amp;lt;...&amp;gt;/output/bin/Release/Microsoft.Python.LanguageServer.dll&#39;]
\ }
let g:LanguageClient_loggingFile = &amp;quot;/tmp/LC.log&amp;quot;
let g:LanguageClient_loggingLevel = &amp;quot;DEBUG&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于微软的 LSP 实现稍微有一点方言（微软：对，我说什么就是什么，sorry，我提的协议我就可以为所欲为～），所以需要在初始化时传入一点参数。
在项目目录下（或者是要编辑的 py 文件的同目录下创建 .vim/settings.json，然后写入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;{
  &amp;quot;enabled&amp;quot;: true,
  &amp;quot;initializationOptions&amp;quot;: {
    &amp;quot;displayOptions&amp;quot;: {
      &amp;quot;preferredFormat&amp;quot;: &amp;quot;plaintext&amp;quot;,
      &amp;quot;trimDocumentationLines&amp;quot;: true,
      &amp;quot;maxDocumentationLineLength&amp;quot;: 0,
      &amp;quot;trimDocumentationText&amp;quot;: true,
      &amp;quot;maxDocumentationTextLength&amp;quot;: 0
    },
    &amp;quot;interpreter&amp;quot;: {
      &amp;quot;properties&amp;quot;: {
        &amp;quot;InterpreterPath&amp;quot;: &amp;quot;&amp;lt;...&amp;gt;&amp;quot;,
        &amp;quot;UseDefaultDatabase&amp;quot;: true,
        &amp;quot;Version&amp;quot;: &amp;quot;&amp;lt;...&amp;gt;&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;还是记得改 &amp;lt;...&amp;gt;！InterpreterPath 就是 Python 解释器的路径，Linux 下一般是 /usr/bin/python，可以用 whereis 命令来找。Version 就是 Python 版本，我个人是 3.7.0。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实是有一种方法，可以对 Python 全局设定 LSP 参数，不用创建局部的配置文件。然而，我比较懒不想配置了 233，各位可以去 LanguageClient 的 Github 页面，参照例子修改 233&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;补充 例子在 &lt;a href=&#34;https://github.com/autozimu/LanguageClient-neovim/wiki/yaml-language-server&#34;&gt;yaml&lt;/a&gt; 页面里，里面的 Method 2 就是了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这之后不要忘了装一个补全框架，Vim 默认的实现其实挺不顺手的。个人建议用一些异步的实现，比如之前提到的 ncm2。记得查看插件的 Github Repo，有一些依赖和配置建议。不看的话很有可能会报出一大堆错啊 233
如果你用了 ncm2，还可以对补全设定加上一些小 tweaks。我个人用的配置是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;&amp;quot; 这里是对于 Multiple Cursors 插件的 workaround，没有这个插件的话就不用了
function g:Multiple_cursors_before()
  call ncm2#lock(&#39;multiple_cursors&#39;)
endfunction
function g:Multiple_cursors_after()
  call ncm2#unlock(&#39;multiple_cursors&#39;)
endfunction
&amp;quot; 不要自动插入补全结果，不要自动选中第一补全，只有一个补全项的时候也显示出来
set completeopt=noinsert,menuone,noselect
&amp;quot; 所有 Buffer 都启用 ncm2
autocmd BufEnter  *  call ncm2#enable_for_buffer()
&amp;quot; Tab 键轮选
inoremap &amp;lt;expr&amp;gt;&amp;lt;tab&amp;gt; pumvisible() ? &amp;quot;\&amp;lt;c-n&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;tab&amp;gt;&amp;quot;
&amp;quot; 退出补全的时候自动关闭补全菜单
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
&amp;quot; 有补全菜单的时候回车时，不仅关闭补全菜单，再加上一个回车（默认行为是吃掉这个回车，很多时候代码写快了，一个回车按下去没有反应还是很烦心的）
inoremap &amp;lt;expr&amp;gt; &amp;lt;CR&amp;gt; (pumvisible() ? &amp;quot;\&amp;lt;c-y&amp;gt;\&amp;lt;cr&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;结论:73fe333ef1410e42088669a13cfeffa5&#34;&gt;结论&lt;/h2&gt;

&lt;p&gt;不出事故的话，补全应该已经可以用了～（虽然我觉得，应该有不小的概率会出毛病，我之前就调了两个钟头... 因为会出问题的地方太多了，我也不清楚具体会有哪些环节出问题 QAQ 如果出了问题，就只能一点点查了。而且好像 Vim 上的 mspyls 基本没人研究，资料应该挺少的 emm）
试了一下，发现... 诶？速度好像是可以，基本是秒出补全，半秒都没有，估计只有几十毫秒的 lag。可是这为啥每次补全之前的初始化要那么久啊？一个小的脚本需要四五秒之后才能开始补全，大的项目的话，有人初始化整整初始化了 4 个小时- -。还有，好像有些 module 的补全提示有点问题，比如 requests 的 get 方法拿到的对象，补全都是 built-in functions，根本没有在能用的方法... 还有各种奇奇怪怪的 import 问题，可以在 repo 的 issues 下看到。
巨硬你怎么回事？说好的 intelliSense 呢？你这个一点都不 intelli 吧？嘛算了，毕竟还是个 alpha，有各种问题还是很正常的。说不定过个半年，就会完善了吧～反正先留着配置，到时候出了新版本，reset 然后 clone 一下，再编译一下，也能无缝升级。坐等微软补完这个引擎，养肥了就能体验完全体的 intelliSense for Python 了～
这里另外推荐一些别的插件，如果用 jedi 补全的话，可以不用 lsp 实现，直接装 ncm2/ncm2-jedi 就可以了，lint 和 autofix 的话，个人喜欢 ALE。高亮增强的话，&lt;a href=&#34;https://github.com/numirias/semshi&#34;&gt;numirias/semshi&lt;/a&gt; 看起来不错。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;到此，本次博客除草就结束了！之后我还会持续关注 mspyls 的，如果补全效果有好转，也许我还会再写一篇文章补充的。关于其他的 Vim for Python 配置，有机会我也会介绍一下的～ 图咱就懒得上了，毕竟补全也没啥图嘛 233
其实吧，我最近的心理状况不是很好，学业上也碰到了不小的问题... 说不定下周又要切换到忧郁模式了 QAQ 嘛，我的近况就下周再更吧。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Vim 配置</title>
      <link>http://localhost:1313/posts/vim-pei-zhi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/vim-pei-zhi/</guid>
      <description>

&lt;p&gt;到现在我才发现，这个博客至今从来没有写过任何关于技术的文章欸（大概是因为我太懒+技术太烂）！我用 Vim 其实已经用了很久了，从接触 Linux 开始我就没用过 Nano 或者是其他的编辑器，因为 Vim 无以比拟的键盘与终端操作的便利性真的让人无法离开。因为大约一周之前 Archlinux 被我在安装新的 X Server 的时候搞炸了，所以趁这个机会重新整理了一下我使用 Vim 的配置和心得。在这里分享一下，也做一下记录和备份。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;正确使用-vim:25d6be75dee94486d03e164460065b8b&#34;&gt;正确使用 Vim&lt;/h2&gt;

&lt;p&gt;很多人质疑说，在 21 世纪，我们根本没有必要使用这种带模式的文本编辑器。这种说法我就不太认同。毕竟，一般人在使用类似 VSCode 的编辑器的时候，都或多或少地接触了模式编辑的概念：使用键盘的时候为 Insert 模式，使用鼠标的时候为 Normal 模式。而鼠标很多时候并不是一个很好的定位工具，因为文本的特殊性，使用键盘来定位内容比使用鼠标更为快捷和精准，并且用终端的时候，鼠标控制更是不可能的。&lt;/p&gt;

&lt;p&gt;还有的人热衷于配置 Vim 将其当作一个全能的 IDE 使用，也有人就此抨击说 Vim 永远也做不到类似大型 IDE 一般的体验。就我个人而言，Vim 的定位就不是一个 IDE，该用 IDE 的时候就用专业的产品，而 Vim 这种工具更像瑞士军刀，启动加载快捷操作方便，在修改一般文本配置文件和写一些小型的脚本语言工具的时候有着 IDE 无法比拟的优势。很多时候如果只是想写一些个人使用的小 Python 脚本或者写一个原型，再去开 IDE 就太浪费时间了。&lt;/p&gt;

&lt;p&gt;然后说到很多人纠结的 Emacs 和 Vim 之争，其实 Emacs 的定位也和 Vim 有着根本的不同。Emacs 是一个非常庞大完整的系统，有 Org-mode、多媒体支持、网络插件等等的功能，还有人在使用 Emacs 来放映电影，查看 PDF 文档，甚至泡咖啡。而 Vim 则更专职文本编辑，并没有太多除了文本编辑以外的功能，其使用用途也更单一。当然也不是说 Vim 不能用来泡咖啡（你可以写个 Python 脚本来和咖啡机通信），但是它本来就不是用来干这种事情的。所以 Emacs 和 Vim 并没有绝对的优劣，只是看各人的需求如何了。&lt;/p&gt;

&lt;h2 id=&#34;vim-的衍生分支-neovim:25d6be75dee94486d03e164460065b8b&#34;&gt;Vim 的衍生分支—— NeoVim&lt;/h2&gt;

&lt;p&gt;在现在，Vim 的开发已经分裂成了两大派别。其一是原始的 Vim 项目，现在处于 8.0 版本。另外还有 NeoVim，是一位开发者对 Vim 陈旧的开发思想感到不满而全新 Fork 出的分支。可以说，NeoVim 对 Vim 的进步起到了极大的推动作用，无论是 Async 操作还是 Timer 等特性，都是 NeoVim 首先实现，然后 Vim 主线再跟进的。此外，NeoVim 对除 VimL 外的外部开发语言的良好支持，对 Terminal 的内嵌，和对外部程序开放的嵌入接口，都给 NeoVim 的扩展带来了无限的可能。&lt;/p&gt;

&lt;p&gt;在 NeoVim 的基础上，套壳 GUI 开始蓬勃发展，很多 GUI 有着非常惊艳的效果，比如基于 Electron 的 Oni 和基于 Go 的 gonvim。它们都大幅改进了 NeoVim 的界面，给 Vim 增加了许多“现代化”的元素，打造“21 世纪的模式编辑器”。
&lt;img src=&#34;http://localhost:1313/images/oni.png&#34; alt=&#34;Oni&#34; /&gt;
&lt;img src=&#34;http://localhost:1313/images/gonvim.png&#34; alt=&#34;gonvim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;因为时间关系，我还没来得及试用这两款 Frontend， 所以下文的配置是针对传统的 GUI 方案——NeoVim-Qt 撰写的，并没有用到什么全新的黑科技。如果有时间，我一定会试用一下这些全新的工具的。&lt;/p&gt;

&lt;h2 id=&#34;我的-vim-配置:25d6be75dee94486d03e164460065b8b&#34;&gt;我的 Vim 配置&lt;/h2&gt;

&lt;h3 id=&#34;在配置之前:25d6be75dee94486d03e164460065b8b&#34;&gt;在配置之前&lt;/h3&gt;

&lt;p&gt;很多人在刚刚上手使用 Vim 的时候就很喜欢上网去找各种 Vim 发行版（比如 &lt;a href=&#34;https://github.com/SpaceVim/SpaceVim&#34;&gt;SpaceVim&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/LER0ever/EverVim&#34;&gt;EverVim&lt;/a&gt;）直接使用，或者看到一篇教程之后安装一大堆 Plugin。这种使用方法是错误的，因为在完全熟悉 Vim 本来的操作之前就用各种附加工具，就相当于还不会走路的时候学跑步，学出来的样子肯定是非常奇怪的。如果过早就陷入了玩配置的过程中，就无法习得 Vim 的正确高效使用方法，因此很多人有着几千行的 .vimrc，还只会不停按着 jkhl 来导航。为了避免这种情况，请先练习 Vim 自带的教程，打开方式是 :Tutor 。&lt;/p&gt;

&lt;p&gt;当你熟悉各种 Vim 的基本操作之后，可以看别人的 Vim 配置教程。在下文中，我不会给出我自己的整个配置文件，而是会分门别类地介绍我正在使用的设置和插件。确保你完全懂得自己写下的配置文件的意义，你才能拥有真正属于自己的 Vim 配置，并且能避免各种奇奇怪怪的问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: 下文所写的配置只保证能在 NeoVim 中正常使用，其中一些插件确认使用了 NeoVim 独有的特性，并且请确保你已经安装了 Python3 插件以支持 Neovim 的 Python 特性。NeoVim 的配置文件 &lt;strong&gt;不是 .vimrc，是 .config/neovim/init.vim，或者是针对 GUI 的 .config/neovim/ginit.vim！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;插件管理:25d6be75dee94486d03e164460065b8b&#34;&gt;插件管理&lt;/h3&gt;

&lt;p&gt;配置 Vim 的时候，或多或少会使用到一些插件，而一个好的插件管理器能避免大量的麻烦，并把插件关系整理得井井有条。很多人应该都听说过 Vundle、vim-plug 这类的管理器，而在现在我更推荐 dein.vim。其作者 &lt;a href=&#34;https://github.com/Shougo&#34;&gt;Shougo&lt;/a&gt; 曾经在 &lt;a href=&#34;https://github.com/Shougo/dein.vim/issues/135&#34;&gt;issue 135&lt;/a&gt; 比较过 dein.vim 与 vim-plug 的区别。&lt;/p&gt;

&lt;p&gt;简单地来说就是：
- 比 vim-plug 更快
- 支持更多的 lazy 加载特性
- 支持缓存
- 支持插件合并
- 可加载本地插件
- 支持除了 git 之外的其他版本控制系统
- 支持通知功能
- 没有命令支持
- 没有安装进度 buffer&lt;/p&gt;

&lt;p&gt;dein.vim 可以配置成在启动 vim 的时候安装不存在的插件，而且安装的速度也很快，配置文件管理起来也很优雅。当然，vim-plug 也是很好的选择，如果个人比较喜欢的话可以选用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;dein.vim: &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;Github 地址&lt;/a&gt;
vim-plug: &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;外观:25d6be75dee94486d03e164460065b8b&#34;&gt;外观&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/vim-one-md.png&#34; alt=&#34;one&#34; /&gt;
对于每天都使用的编辑器，使用一个适合的主题很重要。我个人比较喜欢 [one](&amp;quot;&lt;a href=&#34;https://github.com/rakr/vim-one&amp;quot;&#34;&gt;https://github.com/rakr/vim-one&amp;quot;&lt;/a&gt;) 的白色主题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;ColorScheme one
set background=dark
set background=light
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后改造 Vim 的状态栏，为其添加一条色彩鲜艳的 Powerline。（Powerline 的 Vim 版已经失去支持，现在仍在活跃开发的有 &lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;lightline&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34;&gt;airline&lt;/a&gt;。相对来说，lightline 更加轻量，而 airline 开箱即用，和其他很多插件都有自带整合。airline 还可以安装 &lt;a href=&#34;https://github.com/vim-airline/vim-airline-themes&#34;&gt;airline-themes&lt;/a&gt; 获取各类主题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;let g:airline_theme=&#39;one&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你的字体打过补丁，还可以开启 powerline font 特性进一步美化显示。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;let g:airline_powerline_fonts=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为有了 airline，默认的状态显示就可以关掉了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;set noshowmode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除此之外，还有一些其他的小设置，可以根据个人喜好配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;&amp;quot; 显示行号
set number
&amp;quot; 高亮当前行
set cursorline
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;未完待续...&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>